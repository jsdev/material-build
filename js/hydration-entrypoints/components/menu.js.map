{
  "version": 3,
  "sources": ["../../../../menu/internal/menuitem/menu-item.ts", "../../../../menu/menu-item.ts", "../../../../menu/internal/submenu/sub-menu.ts", "../../../../menu/internal/submenu/sub-menu-styles.ts", "../../../../menu/sub-menu.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../../focus/md-focus-ring.js';\nimport '../../../labs/item/item.js';\nimport '../../../ripple/ripple.js';\n\nimport {html, LitElement, nothing, TemplateResult} from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  queryAssignedNodes,\n} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {literal, html as staticHtml, StaticValue} from 'lit/static-html.js';\n\nimport {ARIAMixinStrict} from '../../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../../internal/aria/delegate.js';\nimport {\n  MenuItem,\n  MenuItemController,\n  type MenuItemType,\n} from '../controllers/menuItemController.js';\n\n/**\n * @fires close-menu {CustomEvent<{initiator: SelectOption, reason: Reason, itemPath: SelectOption[]}>}\n * Closes the encapsulating menu on closable interaction. --bubbles --composed\n */\nexport class MenuItemEl extends LitElement implements MenuItem {\n  static {\n    requestUpdateOnAriaChange(MenuItemEl);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Disables the item and makes it non-selectable and non-interactive.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * Sets the behavior and role of the menu item, defaults to \"menuitem\".\n   */\n  @property() type: MenuItemType = 'menuitem';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n   */\n  @property() href = '';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\n   * set.\n   */\n  @property() target: '_blank' | '_parent' | '_self' | '_top' | '' = '';\n\n  /**\n   * Keeps the menu open if clicked or keyboard selected.\n   */\n  @property({type: Boolean, attribute: 'keep-open'}) keepOpen = false;\n\n  /**\n   * Sets the item in the selected visual state when a submenu is opened.\n   */\n  @property({type: Boolean}) selected = false;\n\n  @query('.list-item') protected readonly listItemRoot!: HTMLElement | null;\n\n  @queryAssignedElements({slot: 'headline'})\n  protected readonly headlineElements!: HTMLElement[];\n  @queryAssignedElements({slot: 'supporting-text'})\n  protected readonly supportingTextElements!: HTMLElement[];\n  @queryAssignedNodes({slot: ''})\n  protected readonly defaultElements!: Node[];\n\n  /**\n   * The text that is selectable via typeahead. If not set, defaults to the\n   * innerText of the item slotted into the `\"headline\"` slot.\n   */\n  get typeaheadText() {\n    return this.menuItemController.typeaheadText;\n  }\n\n  @property({attribute: 'typeahead-text'})\n  set typeaheadText(text: string) {\n    this.menuItemController.setTypeaheadText(text);\n  }\n\n  private readonly menuItemController = new MenuItemController(this, {\n    getHeadlineElements: () => {\n      return this.headlineElements;\n    },\n    getSupportingTextElements: () => {\n      return this.supportingTextElements;\n    },\n    getDefaultElements: () => {\n      return this.defaultElements;\n    },\n    getInteractiveElement: () => this.listItemRoot,\n  });\n\n  protected override render() {\n    return this.renderListItem(html`\n      <md-item>\n        <div slot=\"container\">\n          ${this.renderRipple()} ${this.renderFocusRing()}\n        </div>\n        <slot name=\"start\" slot=\"start\"></slot>\n        <slot name=\"end\" slot=\"end\"></slot>\n        ${this.renderBody()}\n      </md-item>\n    `);\n  }\n\n  /**\n   * Renders the root list item.\n   *\n   * @param content the child content of the list item.\n   */\n  protected renderListItem(content: unknown) {\n    const isAnchor = this.type === 'link';\n    let tag: StaticValue;\n    switch (this.menuItemController.tagName) {\n      case 'a':\n        tag = literal`a`;\n        break;\n      case 'button':\n        tag = literal`button`;\n        break;\n      default:\n      case 'li':\n        tag = literal`li`;\n        break;\n    }\n\n    // TODO(b/265339866): announce \"button\"/\"link\" inside of a list item. Until\n    // then all are \"menuitem\" roles for correct announcement.\n    const target = isAnchor && !!this.target ? this.target : nothing;\n    return staticHtml`\n      <${tag}\n        id=\"item\"\n        tabindex=${this.disabled && !isAnchor ? -1 : 0}\n        role=${this.menuItemController.role}\n        aria-label=${(this as ARIAMixinStrict).ariaLabel || nothing}\n        aria-selected=${(this as ARIAMixinStrict).ariaSelected || nothing}\n        aria-checked=${(this as ARIAMixinStrict).ariaChecked || nothing}\n        aria-expanded=${(this as ARIAMixinStrict).ariaExpanded || nothing}\n        aria-haspopup=${(this as ARIAMixinStrict).ariaHasPopup || nothing}\n        class=\"list-item ${classMap(this.getRenderClasses())}\"\n        href=${this.href || nothing}\n        target=${target}\n        @click=${this.menuItemController.onClick}\n        @keydown=${this.menuItemController.onKeydown}\n      >${content}</${tag}>\n    `;\n  }\n\n  /**\n   * Handles rendering of the ripple element.\n   */\n  protected renderRipple(): TemplateResult | typeof nothing {\n    return html` <md-ripple\n      part=\"ripple\"\n      for=\"item\"\n      ?disabled=${this.disabled}></md-ripple>`;\n  }\n\n  /**\n   * Handles rendering of the focus ring.\n   */\n  protected renderFocusRing(): TemplateResult | typeof nothing {\n    return html` <md-focus-ring\n      part=\"focus-ring\"\n      for=\"item\"\n      inward></md-focus-ring>`;\n  }\n\n  /**\n   * Classes applied to the list item root.\n   */\n  protected getRenderClasses(): ClassInfo {\n    return {\n      'disabled': this.disabled,\n      'selected': this.selected,\n    };\n  }\n\n  /**\n   * Handles rendering the headline and supporting text.\n   */\n  protected renderBody() {\n    return html`\n      <slot></slot>\n      <slot name=\"overline\" slot=\"overline\"></slot>\n      <slot name=\"headline\" slot=\"headline\"></slot>\n      <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n      <slot\n        name=\"trailing-supporting-text\"\n        slot=\"trailing-supporting-text\"></slot>\n    `;\n  }\n\n  override focus() {\n    // TODO(b/300334509): needed for some cases where delegatesFocus doesn't\n    // work programmatically like in FF and select-option\n    this.listItemRoot?.focus();\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {MenuItemEl} from './internal/menuitem/menu-item.js';\nimport {styles} from './internal/menuitem/menu-item-styles.js';\n\nexport {type MenuItem} from './internal/controllers/menuItemController.js';\nexport {type CloseMenuEvent} from './internal/controllers/shared.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-menu-item': MdMenuItem;\n  }\n}\n\n/**\n * @summary Menus display a list of choices on a temporary surface.\n *\n * @description\n * Menu items are the selectable choices within the menu. Menu items must\n * implement the `MenuItem` interface and also have the `md-menu-item`\n * attribute. Additionally menu items are list items so they must also have the\n * `md-list-item` attribute.\n *\n * Menu items can control a menu by selectively firing the `close-menu` and\n * `deselect-items` events.\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-menu-item')\nexport class MdMenuItem extends MenuItemEl {\n  static override styles: CSSResultOrNative[] = [styles];\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, isServer, LitElement} from 'lit';\nimport {property, queryAssignedElements} from 'lit/decorators.js';\n\nimport {\n  createDeactivateItemsEvent,\n  createRequestActivationEvent,\n  deactivateActiveItem,\n  getFirstActivatableItem,\n} from '../../../list/internal/list-navigation-helpers.js';\nimport {MenuItem} from '../controllers/menuItemController.js';\nimport {\n  CloseMenuEvent,\n  CloseReason,\n  createActivateTypeaheadEvent,\n  createDeactivateTypeaheadEvent,\n  KeydownCloseKey,\n  Menu,\n  NavigableKey,\n  SelectionKey,\n} from '../controllers/shared.js';\nimport {Corner} from '../menu.js';\n\n/**\n * @fires deactivate-items {Event} Requests the parent menu to deselect other\n * items when a submenu opens. --bubbles --composed\n * @fires request-activation {Event} Requests the parent to make the slotted item\n * focusable and focus the item. --bubbles --composed\n * @fires deactivate-typeahead {Event} Requests the parent menu to deactivate\n * the typeahead functionality when a submenu opens. --bubbles --composed\n * @fires activate-typeahead {Event} Requests the parent menu to activate the\n * typeahead functionality when a submenu closes. --bubbles --composed\n */\nexport class SubMenu extends LitElement {\n  /**\n   * The anchorCorner to set on the submenu.\n   */\n  @property({attribute: 'anchor-corner'})\n  anchorCorner: Corner = Corner.START_END;\n  /**\n   * The menuCorner to set on the submenu.\n   */\n  @property({attribute: 'menu-corner'}) menuCorner: Corner = Corner.START_START;\n  /**\n   * The delay between mouseenter and submenu opening.\n   */\n  @property({type: Number, attribute: 'hover-open-delay'}) hoverOpenDelay = 400;\n  /**\n   * The delay between ponterleave and the submenu closing.\n   */\n  @property({type: Number, attribute: 'hover-close-delay'})\n  hoverCloseDelay = 400;\n\n  /**\n   * READONLY: self-identifies as a menu item and sets its identifying attribute\n   */\n  @property({type: Boolean, reflect: true, attribute: 'md-sub-menu'})\n  isSubMenu = true;\n\n  get item() {\n    return this.items[0] ?? null;\n  }\n\n  get menu() {\n    return this.menus[0] ?? null;\n  }\n\n  @queryAssignedElements({slot: 'item', flatten: true})\n  private readonly items!: MenuItem[];\n\n  @queryAssignedElements({slot: 'menu', flatten: true})\n  private readonly menus!: Menu[];\n\n  private previousOpenTimeout = 0;\n  private previousCloseTimeout = 0;\n\n  constructor() {\n    super();\n\n    if (!isServer) {\n      this.addEventListener('mouseenter', this.onMouseenter);\n      this.addEventListener('mouseleave', this.onMouseleave);\n    }\n  }\n\n  override render() {\n    return html`\n      <slot\n        name=\"item\"\n        @click=${this.onClick}\n        @keydown=${this.onKeydown}\n        @slotchange=${this.onSlotchange}>\n      </slot>\n      <slot\n        name=\"menu\"\n        @keydown=${this.onSubMenuKeydown}\n        @close-menu=${this.onCloseSubmenu}\n        @slotchange=${this.onSlotchange}>\n      </slot>\n    `;\n  }\n\n  protected override firstUpdated() {\n    // slotchange is not fired if the contents have been SSRd\n    this.onSlotchange();\n  }\n\n  /**\n   * Shows the submenu.\n   */\n  async show() {\n    const menu = this.menu;\n    if (!menu || menu.open) return;\n\n    // Ensures that we deselect items when the menu closes and reactivate\n    // typeahead when the menu closes, so that we do not have dirty state of\n    // `sub-menu > menu-item[selected]` when we reopen.\n    //\n    // This cannot happen in `close()` because the menu may close via other\n    // means Additionally, this cannot happen in onCloseSubmenu because\n    // `close-menu` may not be called via focusout of outside click and not\n    // triggered by an item\n    menu.addEventListener(\n      'closed',\n      () => {\n        this.item.ariaExpanded = 'false';\n        this.dispatchEvent(createActivateTypeaheadEvent());\n        this.dispatchEvent(createDeactivateItemsEvent());\n        // aria-hidden required so ChromeVox doesn't announce the closed menu\n        menu.ariaHidden = 'true';\n      },\n      {once: true},\n    );\n\n    // Parent menu is `position: absolute` – this creates a new CSS relative\n    // positioning context (similar to doing `position: relative`), so the\n    // submenu's `<md-menu slot=\"submenu\" positioning=\"document\">` would be\n    // wrong even if we change `md-sub-menu` from `position: relative` to\n    // `position: static` because the submenu it would still be positioning\n    // itself relative to the parent menu.\n    if (menu.positioning === 'document') {\n      menu.positioning = 'absolute';\n    }\n    menu.quick = true;\n    // Submenus are in overflow when not fixed. Can remove once we have native\n    // popup support\n    menu.hasOverflow = true;\n    menu.anchorCorner = this.anchorCorner;\n    menu.menuCorner = this.menuCorner;\n    menu.anchorElement = this.item;\n    menu.defaultFocus = 'first-item';\n    // aria-hidden management required so ChromeVox doesn't announce the closed\n    // menu. Remove it here since we are about to show and focus it.\n    menu.removeAttribute('aria-hidden');\n    // This is required in the case where we have a leaf menu open and and the\n    // user hovers a parent menu's item which is not an md-sub-menu item.\n    // If this were set to true, then the menu would close and focus would be\n    // lost. That means the focusout event would have a `relatedTarget` of\n    // `null` since nothing in the menu would be focused anymore due to the\n    // leaf menu closing. restoring focus ensures that we keep focus in the\n    // submenu tree.\n    menu.skipRestoreFocus = false;\n\n    // Menu could already be opened because of mouse interaction\n    const menuAlreadyOpen = menu.open;\n    menu.show();\n    this.item.ariaExpanded = 'true';\n    this.item.ariaHasPopup = 'menu';\n    if (menu.id) {\n      this.item.setAttribute('aria-controls', menu.id);\n    }\n\n    // Deactivate other items. This can be the case if the user has tabbed\n    // around the menu and then mouses over an md-sub-menu.\n    this.dispatchEvent(createDeactivateItemsEvent());\n    this.dispatchEvent(createDeactivateTypeaheadEvent());\n    this.item.selected = true;\n\n    // This is the case of mouse hovering when already opened via keyboard or\n    // vice versa\n    if (!menuAlreadyOpen) {\n      let open = (value: unknown) => {};\n      const opened = new Promise((resolve) => {\n        open = resolve;\n      });\n      menu.addEventListener('opened', open, {once: true});\n      await opened;\n    }\n  }\n\n  /**\n   * Closes the submenu.\n   */\n  async close() {\n    const menu = this.menu;\n    if (!menu || !menu.open) return;\n\n    this.dispatchEvent(createActivateTypeaheadEvent());\n    menu.quick = true;\n    menu.close();\n    this.dispatchEvent(createDeactivateItemsEvent());\n    let close = (value: unknown) => {};\n    const closed = new Promise((resolve) => {\n      close = resolve;\n    });\n    menu.addEventListener('closed', close, {once: true});\n    await closed;\n  }\n\n  protected onSlotchange() {\n    if (!this.item) {\n      return;\n    }\n\n    // TODO(b/301296618): clean up old aria values on change\n    this.item.ariaExpanded = 'false';\n    this.item.ariaHasPopup = 'menu';\n    if (this.menu?.id) {\n      this.item.setAttribute('aria-controls', this.menu.id);\n    }\n    this.item.keepOpen = true;\n\n    const menu = this.menu;\n    if (!menu) return;\n\n    menu.isSubmenu = true;\n    // Required for ChromeVox to not linearly navigate to the menu while closed\n    menu.ariaHidden = 'true';\n  }\n\n  /**\n   * Starts the default 400ms countdown to open the submenu.\n   *\n   * NOTE: We explicitly use mouse events and not pointer events because\n   * pointer events apply to touch events. And if a user were to tap a\n   * sub-menu, it would fire the \"pointerenter\", \"pointerleave\", \"click\" events\n   * which would open the menu on click, and then set the timeout to close the\n   * menu due to pointerleave.\n   */\n  protected onMouseenter = () => {\n    clearTimeout(this.previousOpenTimeout);\n    clearTimeout(this.previousCloseTimeout);\n    if (this.menu?.open) return;\n\n    // Open synchronously if delay is 0. (screenshot tests infra\n    // would never resolve otherwise)\n    if (!this.hoverOpenDelay) {\n      this.show();\n    } else {\n      this.previousOpenTimeout = setTimeout(() => {\n        this.show();\n      }, this.hoverOpenDelay);\n    }\n  };\n\n  /**\n   * Starts the default 400ms countdown to close the submenu.\n   *\n   * NOTE: We explicitly use mouse events and not pointer events because\n   * pointer events apply to touch events. And if a user were to tap a\n   * sub-menu, it would fire the \"pointerenter\", \"pointerleave\", \"click\" events\n   * which would open the menu on click, and then set the timeout to close the\n   * menu due to pointerleave.\n   */\n  protected onMouseleave = () => {\n    clearTimeout(this.previousCloseTimeout);\n    clearTimeout(this.previousOpenTimeout);\n\n    // Close synchronously if delay is 0. (screenshot tests infra\n    // would never resolve otherwise)\n    if (!this.hoverCloseDelay) {\n      this.close();\n    } else {\n      this.previousCloseTimeout = setTimeout(() => {\n        this.close();\n      }, this.hoverCloseDelay);\n    }\n  };\n\n  protected onClick() {\n    this.show();\n  }\n\n  /**\n   * On item keydown handles opening the submenu.\n   */\n  protected async onKeydown(event: KeyboardEvent) {\n    const shouldOpenSubmenu = this.isSubmenuOpenKey(event.code);\n\n    if (event.defaultPrevented) return;\n\n    const openedWithLR =\n      shouldOpenSubmenu &&\n      (NavigableKey.LEFT === event.code || NavigableKey.RIGHT === event.code);\n\n    if (event.code === SelectionKey.SPACE || openedWithLR) {\n      // prevent space from scrolling and Left + Right from selecting previous /\n      // next items or opening / closing parent menus. Only open the submenu.\n      event.preventDefault();\n\n      if (openedWithLR) {\n        event.stopPropagation();\n      }\n    }\n\n    if (!shouldOpenSubmenu) {\n      return;\n    }\n\n    const submenu = this.menu;\n    if (!submenu) return;\n\n    const submenuItems = submenu.items;\n    const firstActivatableItem = getFirstActivatableItem(submenuItems);\n\n    if (firstActivatableItem) {\n      await this.show();\n\n      firstActivatableItem.tabIndex = 0;\n      firstActivatableItem.focus();\n\n      return;\n    }\n  }\n\n  private onCloseSubmenu(event: CloseMenuEvent) {\n    const {itemPath, reason} = event.detail;\n    itemPath.push(this.item);\n\n    this.dispatchEvent(createActivateTypeaheadEvent());\n    // Escape should only close one menu not all of the menus unlike space or\n    // click selection which should close all menus.\n    if (\n      reason.kind === CloseReason.KEYDOWN &&\n      reason.key === KeydownCloseKey.ESCAPE\n    ) {\n      event.stopPropagation();\n      this.item.dispatchEvent(createRequestActivationEvent());\n      return;\n    }\n\n    this.dispatchEvent(createDeactivateItemsEvent());\n  }\n\n  private async onSubMenuKeydown(event: KeyboardEvent) {\n    if (event.defaultPrevented) return;\n    const {close: shouldClose, keyCode} = this.isSubmenuCloseKey(event.code);\n    if (!shouldClose) return;\n\n    // Communicate that it's handled so that we don't accidentally close every\n    // parent menu. Additionally, we want to isolate things like the typeahead\n    // keydowns from bubbling up to the parent menu and confounding things.\n    event.preventDefault();\n\n    if (keyCode === NavigableKey.LEFT || keyCode === NavigableKey.RIGHT) {\n      // Prevent this from bubbling to parents\n      event.stopPropagation();\n    }\n\n    await this.close();\n\n    deactivateActiveItem(this.menu.items);\n    this.item?.focus();\n    this.item.tabIndex = 0;\n    this.item.focus();\n  }\n\n  /**\n   * Determines whether the given KeyboardEvent code is one that should open\n   * the submenu. This is RTL-aware. By default, left, right, space, or enter.\n   *\n   * @param code The native KeyboardEvent code.\n   * @return Whether or not the key code should open the submenu.\n   */\n  private isSubmenuOpenKey(code: string) {\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const arrowEnterKey = isRtl ? NavigableKey.LEFT : NavigableKey.RIGHT;\n    switch (code) {\n      case arrowEnterKey:\n      case SelectionKey.SPACE:\n      case SelectionKey.ENTER:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Determines whether the given KeyboardEvent code is one that should close\n   * the submenu. This is RTL-aware. By default right, left, or escape.\n   *\n   * @param code The native KeyboardEvent code.\n   * @return Whether or not the key code should close the submenu.\n   */\n  private isSubmenuCloseKey(code: string) {\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const arrowEnterKey = isRtl ? NavigableKey.RIGHT : NavigableKey.LEFT;\n    switch (code) {\n      case arrowEnterKey:\n      case KeydownCloseKey.ESCAPE:\n        return {close: true, keyCode: code} as const;\n      default:\n        return {close: false} as const;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./menu/internal/submenu/sub-menu-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{position:relative;display:flex;flex-direction:column}\n`;\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {SubMenu} from './internal/submenu/sub-menu.js';\nimport {styles} from './internal/submenu/sub-menu-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-sub-menu': MdSubMenu;\n  }\n}\n\n/**\n * @summary Menus display a list of choices on a temporary surface.\n *\n * @description\n * Menu items are the selectable choices within the menu. Menu items must\n * implement the `Menu` interface and also have the `md-menu`\n * attribute. Additionally menu items are list items so they must also have the\n * `md-list-item` attribute.\n *\n * Menu items can control a menu by selectively firing the `close-menu` and\n * `deselect-items` events.\n *\n * This menu item will open a sub-menu that is slotted in the `submenu` slot.\n * Additionally, the containing menu must either have `has-overflow` or\n * `positioning=fixed` set to `true` in order to display the containing menu\n * properly.\n *\n * @example\n * ```html\n * <div style=\"position:relative;\">\n *   <button\n *       id=\"anchor\"\n *       @click=${() => this.menuRef.value.show()}>\n *     Click to open menu\n *   </button>\n *   <!--\n *     `has-overflow` is required when using a submenu which overflows the\n *     menu's contents\n *   -->\n *   <md-menu anchor=\"anchor\" has-overflow ${ref(menuRef)}>\n *     <md-menu-item headline=\"This is a headline\"></md-menu-item>\n *     <md-sub-menu>\n *       <md-menu-item\n *           slot=\"item\"\n *           headline=\"this is a submenu item\">\n *       </md-menu-item>\n *       <md-menu slot=\"menu\">\n *         <md-menu-item headline=\"This is an item inside a submenu\">\n *         </md-menu-item>\n *       </md-menu>\n *     </md-sub-menu>\n *   </md-menu>\n * </div>\n * ```\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-sub-menu')\nexport class MdSubMenu extends SubMenu {\n  static override styles: CSSResultOrNative[] = [styles];\n}\n"],
  "mappings": "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",
  "names": ["i", "n", "o", "MdMenuItem", "o", "styles", "i", "MdSubMenu", "styles"]
}
