{
  "version": 3,
  "sources": ["../../src/components/drag-playground.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\nimport { LitElement, css, html } from 'lit';\nimport { customElement, state, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport '@material/web/icon/icon.js';\n\n/**\n * A playground preview + editor with a draggable handle.\n */\n@customElement('drag-playground')\nexport class DragPlayground extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      --_drag-bar-height: 24px;\n      --_drag-bar-border-width: 1px;\n      --_half-drag-bar-height: calc(\n        (var(--_drag-bar-height) / 2) + var(--_drag-bar-border-width)\n      );\n    }\n\n    #wrapper {\n      display: flex;\n      flex-direction: column;\n    }\n\n    :host,\n    #wrapper,\n    ::slotted(*) {\n      height: 100%;\n    }\n\n    slot {\n      display: block;\n      overflow: hidden;\n    }\n\n    [name='preview'] {\n      height: max(\n        calc(\n          100% - var(--editor-percentage, 0%) - var(--_half-drag-bar-height)\n        ),\n        0px\n      );\n    }\n\n    [name='editor'] {\n      height: max(\n        calc(var(--editor-percentage, 0px) - var(--_half-drag-bar-height)),\n        0px\n      );\n    }\n\n    #drag-bar {\n      touch-action: none;\n      background-color: var(--md-sys-color-surface-container);\n      color: var(--md-sys-color-on-surface);\n      border: var(--_drag-bar-border-width) solid var(--md-sys-color-outline);\n      border-radius: 12px;\n      height: var(--_drag-bar-height);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      -webkit-user-select: none;\n      user-select: none;\n    }\n\n    #drag-bar:hover {\n      background-color: var(--md-sys-color-surface-container-high);\n      cursor: grab;\n    }\n\n    #drag-bar.isDragging {\n      background-color: var(--md-sys-color-inverse-surface);\n      color: var(--md-sys-color-inverse-on-surface);\n      cursor: grabbing;\n    }\n  `;\n\n  /**\n   * Whether or not we are in the \"dragging\" state.\n   */\n  @state() private isDragging = false;\n\n  /**\n   * The percentage of the editor height.\n   */\n  @state() private editorHeightPercent = 0;\n\n  @query('#wrapper') private wrapperEl!: HTMLElement;\n\n  /**\n   * A set of pointer IDs in the case that the user is dragging with multiple\n   * pointers.\n   */\n  private pointerIds = new Set<number>();\n\n  render() {\n    return html`<div\n      id=\"wrapper\"\n      style=${styleMap({\n        '--editor-percentage': `${this.editorHeightPercent}%`,\n      })}\n    >\n      <slot name=\"preview\"></slot>\n      <div\n        id=\"drag-bar\"\n        tabindex=\"0\"\n        role=\"slider\"\n        aria-orientation=\"vertical\"\n        aria-valuemax=\"100\"\n        aria-valuemin=\"0\"\n        aria-valuenow=\"${this.editorHeightPercent}\"\n        aria-valuetext=\"${this.editorHeightPercent} percent\"\n        aria-label=\"Editor height\"\n        @focus=${this.onFocus}\n        @blur=${this.onBlur}\n        @keydown=${this.onKeydown}\n        @pointerdown=${this.onPointerdown}\n        @pointerup=${this.onPointerup}\n        @pointermove=${this.onPointermove}\n        class=${classMap({\n          isDragging: this.isDragging,\n        })}\n      >\n        <md-icon>drag_handle</md-icon>\n      </div>\n      <slot name=\"editor\"></slot>\n    </div>`;\n  }\n\n  private onFocus() {\n    this.isDragging = true;\n  }\n\n  private onBlur() {\n    this.isDragging = false;\n  }\n\n  private onKeydown(event: KeyboardEvent) {\n    const { key } = event;\n    switch (key) {\n      case 'ArrowRight':\n      case 'ArrowUp':\n        this.editorHeightPercent = Math.min(this.editorHeightPercent + 1, 100);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowDown':\n        this.editorHeightPercent = Math.max(this.editorHeightPercent - 1, 0);\n        break;\n      case 'PageUp':\n        this.editorHeightPercent = Math.min(this.editorHeightPercent + 10, 100);\n        break;\n      case 'PageDown':\n        this.editorHeightPercent = Math.max(this.editorHeightPercent - 10, 0);\n        break;\n      case 'Home':\n        this.editorHeightPercent = 0;\n        break;\n      case 'End':\n        this.editorHeightPercent = 100;\n        break;\n      default:\n        break;\n    }\n  }\n\n  private onPointerdown(event: PointerEvent) {\n    this.isDragging = true;\n\n    if (this.pointerIds.has(event.pointerId)) return;\n\n    this.pointerIds.add(event.pointerId);\n    (event.target as HTMLElement).setPointerCapture(event.pointerId);\n  }\n\n  private onPointerup(event: PointerEvent) {\n    this.pointerIds.delete(event.pointerId);\n    (event.target as HTMLElement).releasePointerCapture(event.pointerId);\n\n    if (this.pointerIds.size === 0) {\n      this.isDragging = false;\n    }\n  }\n\n  private onPointermove(event: PointerEvent) {\n    if (!this.isDragging) return;\n\n    const { clientY: mouseY } = event;\n    const { top: wrapperTop, bottom: wrapperBottom } =\n      this.wrapperEl.getBoundingClientRect();\n\n    // The height of the wrapper\n    const height = wrapperBottom - wrapperTop;\n\n    // Calculate the percentage of the editor height in which the pointer is\n    // located\n    const editorHeightPercent = 100 - ((mouseY - wrapperTop) / height) * 100;\n\n    // Clamp the percentage between 0 and 100\n    this.editorHeightPercent = Math.min(Math.max(editorHeightPercent, 0), 100);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'drag-playground': DragPlayground;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAiBO,IAAM,iBAAN,cAA6B,EAAW;AAAA,EAAxC;AAAA;AAwEI,SAAQ,aAAa;AAKrB,SAAQ,sBAAsB;AAQvC;AAAA;AAAA;AAAA;AAAA,SAAQ,aAAa,oBAAI,IAAY;AAAA;AAAA,EAErC,SAAS;AACP,WAAO;AAAA;AAAA,cAEGA,GAAS;AAAA,MACf,uBAAuB,GAAG,KAAK;AAAA,IACjC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAUkB,KAAK;AAAA,0BACJ,KAAK;AAAA;AAAA,iBAEd,KAAK;AAAA,gBACN,KAAK;AAAA,mBACF,KAAK;AAAA,uBACD,KAAK;AAAA,qBACP,KAAK;AAAA,uBACH,KAAK;AAAA,gBACZ,EAAS;AAAA,MACf,YAAY,KAAK;AAAA,IACnB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMP;AAAA,EAEQ,UAAU;AAChB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEQ,SAAS;AACf,SAAK,aAAa;AAAA,EACpB;AAAA,EAEQ,UAAU,OAAsB;AACtC,UAAM,EAAE,IAAI,IAAI;AAChB,YAAQ,KAAK;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACH,aAAK,sBAAsB,KAAK,IAAI,KAAK,sBAAsB,GAAG,GAAG;AACrE;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,aAAK,sBAAsB,KAAK,IAAI,KAAK,sBAAsB,GAAG,CAAC;AACnE;AAAA,MACF,KAAK;AACH,aAAK,sBAAsB,KAAK,IAAI,KAAK,sBAAsB,IAAI,GAAG;AACtE;AAAA,MACF,KAAK;AACH,aAAK,sBAAsB,KAAK,IAAI,KAAK,sBAAsB,IAAI,CAAC;AACpE;AAAA,MACF,KAAK;AACH,aAAK,sBAAsB;AAC3B;AAAA,MACF,KAAK;AACH,aAAK,sBAAsB;AAC3B;AAAA,MACF;AACE;AAAA,IACJ;AAAA,EACF;AAAA,EAEQ,cAAc,OAAqB;AACzC,SAAK,aAAa;AAElB,QAAI,KAAK,WAAW,IAAI,MAAM,SAAS;AAAG;AAE1C,SAAK,WAAW,IAAI,MAAM,SAAS;AACnC,IAAC,MAAM,OAAuB,kBAAkB,MAAM,SAAS;AAAA,EACjE;AAAA,EAEQ,YAAY,OAAqB;AACvC,SAAK,WAAW,OAAO,MAAM,SAAS;AACtC,IAAC,MAAM,OAAuB,sBAAsB,MAAM,SAAS;AAEnE,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAEQ,cAAc,OAAqB;AACzC,QAAI,CAAC,KAAK;AAAY;AAEtB,UAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,UAAM,EAAE,KAAK,YAAY,QAAQ,cAAc,IAC7C,KAAK,UAAU,sBAAsB;AAGvC,UAAM,SAAS,gBAAgB;AAI/B,UAAM,sBAAsB,OAAQ,SAAS,cAAc,SAAU;AAGrE,SAAK,sBAAsB,KAAK,IAAI,KAAK,IAAI,qBAAqB,CAAC,GAAG,GAAG;AAAA,EAC3E;AACF;AAhMa,eACJ,SAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEC;AAAA,EAAhB,EAAM;AAAA,GAxEI,eAwEM;AAKA;AAAA,EAAhB,EAAM;AAAA,GA7EI,eA6EM;AAEU;AAAA,EAA1B,EAAM,UAAU;AAAA,GA/EN,eA+EgB;AA/EhB,iBAAN;AAAA,EADN,EAAc,iBAAiB;AAAA,GACnB;",
  "names": ["o", "i"]
}
