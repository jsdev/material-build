{
  "version": 3,
  "sources": ["../../../labs/segmentedbutton/internal/segmented-button.ts", "../../../labs/segmentedbutton/internal/outlined-segmented-button.ts", "../../../labs/segmentedbutton/internal/outlined-styles.ts", "../../../labs/segmentedbutton/internal/shared-styles.ts", "../../../labs/segmentedbutton/outlined-segmented-button.ts", "../../../labs/segmentedbuttonset/internal/segmented-button-set.ts", "../../../labs/segmentedbuttonset/internal/outlined-segmented-button-set.ts", "../../../labs/segmentedbuttonset/internal/outlined-styles.ts", "../../../labs/segmentedbuttonset/internal/shared-styles.ts", "../../../labs/segmentedbuttonset/outlined-segmented-button-set.ts", "../../../slider/internal/forced-colors-styles.ts", "../../../node_modules/lit-html/src/directives/when.ts", "../../../slider/internal/slider.ts", "../../../slider/internal/slider-styles.ts", "../../../slider/slider.ts", "../../src/components/hct-slider.ts", "../../src/types/color-events.ts", "../../src/components/theme-changer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../../focus/md-focus-ring.js';\nimport '../../../ripple/ripple.js';\n\nimport {html, LitElement, nothing, PropertyValues, TemplateResult} from 'lit';\nimport {property, queryAssignedElements, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {ARIAMixinStrict} from '../../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../../internal/aria/delegate.js';\n\n/**\n * SegmentedButton is a web component implementation of the Material Design\n * segmented button component. It is intended **only** for use as a child of a\n * `SementedButtonSet` component. It is **not** intended for use in any other\n * context.\n *\n * @fires segmented-button-interaction {Event} Dispatched whenever a button is\n * clicked. --bubbles --composed\n */\nexport class SegmentedButton extends LitElement {\n  static {\n    requestUpdateOnAriaChange(SegmentedButton);\n  }\n\n  @property({type: Boolean}) disabled = false;\n  @property({type: Boolean}) selected = false;\n  @property() label = '';\n  @property({type: Boolean, attribute: 'no-checkmark'}) noCheckmark = false;\n  @property({type: Boolean, attribute: 'has-icon'}) hasIcon = false;\n\n  @state() private animState = '';\n  @queryAssignedElements({slot: 'icon', flatten: true})\n  private readonly iconElement!: HTMLElement[];\n\n  protected override update(props: PropertyValues<SegmentedButton>) {\n    this.animState = this.nextAnimationState(props);\n    super.update(props);\n    // NOTE: This needs to be set *after* calling super.update() to ensure the\n    // appropriate CSS classes are applied.\n    this.hasIcon = this.iconElement.length > 0;\n  }\n\n  private nextAnimationState(\n    changedProps: PropertyValues<SegmentedButton>,\n  ): string {\n    const prevSelected = changedProps.get('selected');\n    // Early exit for first update.\n    if (prevSelected === undefined) return '';\n\n    const nextSelected = this.selected;\n    const nextHasCheckmark = !this.noCheckmark;\n    if (!prevSelected && nextSelected && nextHasCheckmark) {\n      return 'selecting';\n    }\n    if (prevSelected && !nextSelected && nextHasCheckmark) {\n      return 'deselecting';\n    }\n    return '';\n  }\n\n  private handleClick() {\n    const event = new Event('segmented-button-interaction', {\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  protected override render() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <button\n        tabindex=\"${this.disabled ? '-1' : '0'}\"\n        aria-label=${ariaLabel || nothing}\n        aria-pressed=${this.selected}\n        ?disabled=${this.disabled}\n        @click=\"${this.handleClick}\"\n        class=\"md3-segmented-button ${classMap(this.getRenderClasses())}\">\n        <md-focus-ring\n          class=\"md3-segmented-button__focus-ring\"\n          part=\"focus-ring\"></md-focus-ring>\n        <md-ripple\n          ?disabled=\"${this.disabled}\"\n          class=\"md3-segmented-button__ripple\"></md-ripple>\n        ${this.renderOutline()} ${this.renderLeading()} ${this.renderLabel()}\n        ${this.renderTouchTarget()}\n      </button>\n    `;\n  }\n\n  protected getRenderClasses() {\n    return {\n      'md3-segmented-button--selected': this.selected,\n      'md3-segmented-button--unselected': !this.selected,\n      'md3-segmented-button--with-label': this.label !== '',\n      'md3-segmented-button--without-label': this.label === '',\n      'md3-segmented-button--with-icon': this.hasIcon,\n      'md3-segmented-button--with-checkmark': !this.noCheckmark,\n      'md3-segmented-button--without-checkmark': this.noCheckmark,\n      'md3-segmented-button--selecting': this.animState === 'selecting',\n      'md3-segmented-button--deselecting': this.animState === 'deselecting',\n    };\n  }\n\n  protected renderOutline(): TemplateResult | typeof nothing {\n    return nothing;\n  }\n\n  private renderLeading() {\n    return this.label === ''\n      ? this.renderLeadingWithoutLabel()\n      : this.renderLeadingWithLabel();\n  }\n\n  private renderLeadingWithoutLabel() {\n    return html`\n      <span class=\"md3-segmented-button__leading\" aria-hidden=\"true\">\n        <span class=\"md3-segmented-button__graphic\">\n          <svg class=\"md3-segmented-button__checkmark\" viewBox=\"0 0 24 24\">\n            <path\n              class=\"md3-segmented-button__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n        </span>\n        <span class=\"md3-segmented-button__icon\" aria-hidden=\"true\">\n          <slot name=\"icon\"></slot>\n        </span>\n      </span>\n    `;\n  }\n\n  private renderLeadingWithLabel() {\n    return html`\n      <span class=\"md3-segmented-button__leading\" aria-hidden=\"true\">\n        <span class=\"md3-segmented-button__graphic\">\n          <svg class=\"md3-segmented-button__checkmark\" viewBox=\"0 0 24 24\">\n            <path\n              class=\"md3-segmented-button__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n          <span class=\"md3-segmented-button__icon\" aria-hidden=\"true\">\n            <slot name=\"icon\"></slot>\n          </span>\n        </span>\n      </span>\n    `;\n  }\n\n  private renderLabel() {\n    return html`\n      <span class=\"md3-segmented-button__label-text\">${this.label}</span>\n    `;\n  }\n\n  private renderTouchTarget() {\n    return html`<span class=\"md3-segmented-button__touch\"></span>`;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html} from 'lit';\n\nimport {SegmentedButton} from './segmented-button.js';\n\n/**\n * b/265346443 - add docs\n */\nexport class OutlinedSegmentedButton extends SegmentedButton {\n  protected override getRenderClasses() {\n    return {\n      ...super.getRenderClasses(),\n      'md3-segmented-button--outlined': true,\n    };\n  }\n\n  protected override renderOutline() {\n    return html`<span class=\"md3-segmented-button__outline\"></span>`;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./labs/segmentedbutton/internal/outlined-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{--_container-height: var(--md-outlined-segmented-button-container-height, 40px);--_disabled-icon-color: var(--md-outlined-segmented-button-disabled-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-color: var(--md-outlined-segmented-button-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-color: var(--md-outlined-segmented-button-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-state-layer-opacity: var(--md-outlined-segmented-button-hover-state-layer-opacity, 0.08);--_label-text-font: var(--md-outlined-segmented-button-label-text-font, var(--md-sys-typescale-label-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-segmented-button-label-text-line-height, var(--md-sys-typescale-label-large-line-height, 1.25rem));--_label-text-size: var(--md-outlined-segmented-button-label-text-size, var(--md-sys-typescale-label-large-size, 0.875rem));--_label-text-weight: var(--md-outlined-segmented-button-label-text-weight, var(--md-sys-typescale-label-large-weight, var(--md-ref-typeface-weight-medium, 500)));--_outline-color: var(--md-outlined-segmented-button-outline-color, var(--md-sys-color-outline, #79747e));--_pressed-state-layer-opacity: var(--md-outlined-segmented-button-pressed-state-layer-opacity, 0.12);--_selected-container-color: var(--md-outlined-segmented-button-selected-container-color, var(--md-sys-color-secondary-container, #e8def8));--_selected-focus-icon-color: var(--md-outlined-segmented-button-selected-focus-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-focus-label-text-color: var(--md-outlined-segmented-button-selected-focus-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-icon-color: var(--md-outlined-segmented-button-selected-hover-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-label-text-color: var(--md-outlined-segmented-button-selected-hover-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-state-layer-color: var(--md-outlined-segmented-button-selected-hover-state-layer-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-label-text-color: var(--md-outlined-segmented-button-selected-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-icon-color: var(--md-outlined-segmented-button-selected-pressed-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-label-text-color: var(--md-outlined-segmented-button-selected-pressed-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-state-layer-color: var(--md-outlined-segmented-button-selected-pressed-state-layer-color, var(--md-sys-color-on-secondary-container, #1d192b));--_shape: var(--md-outlined-segmented-button-shape, var(--md-sys-shape-corner-full, 9999px));--_unselected-focus-icon-color: var(--md-outlined-segmented-button-unselected-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-focus-label-text-color: var(--md-outlined-segmented-button-unselected-focus-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-icon-color: var(--md-outlined-segmented-button-unselected-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-label-text-color: var(--md-outlined-segmented-button-unselected-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-state-layer-color: var(--md-outlined-segmented-button-unselected-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-label-text-color: var(--md-outlined-segmented-button-unselected-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-icon-color: var(--md-outlined-segmented-button-unselected-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-label-text-color: var(--md-outlined-segmented-button-unselected-pressed-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-state-layer-color: var(--md-outlined-segmented-button-unselected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_icon-size: var(--md-outlined-segmented-button-icon-size, 18px);--_selected-icon-color: var(--md-outlined-segmented-button-selected-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_unselected-icon-color: var(--md-outlined-segmented-button-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_shape-start-start: var(--md-outlined-segmented-button-shape-start-start, var(--md-sys-shape-corner-full, 9999px));--_shape-start-end: var(--md-outlined-segmented-button-shape-start-end, var(--md-sys-shape-corner-full, 9999px));--_shape-end-end: var(--md-outlined-segmented-button-shape-end-end, var(--md-sys-shape-corner-full, 9999px));--_shape-end-start: var(--md-outlined-segmented-button-shape-end-start, var(--md-sys-shape-corner-full, 9999px));--_spacing-leading: var(--md-outlined-segmented-button-spacing-leading, 12px);--_spacing-trailing: var(--md-outlined-segmented-button-spacing-trailing, 12px)}.md3-segmented-button__outline{border-radius:inherit;border-style:solid;border-width:1px;inset:0px -0.5px;pointer-events:none;position:absolute}\n`;\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./labs/segmentedbutton/internal/shared-styles.css.\nimport {css} from 'lit';\nexport const styles = css`@keyframes md3-segmented-button-checkmark-selection-draw-in{from{stroke-dashoffset:29.7833385}to{stroke-dashoffset:0}}@keyframes md3-segmented-button-simple-fade-out{from{opacity:1}to{opacity:0}}@keyframes md3-segmented-button-simple-fade-in{from{opacity:0}to{opacity:1}}:host{display:inline-flex;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.md3-segmented-button{align-items:center;background:rgba(0,0,0,0);border:none;border-radius:inherit;display:flex;flex:1;justify-content:center;outline:none;position:relative;vertical-align:middle;padding-inline-start:var(--_spacing-leading);padding-inline-end:var(--_spacing-trailing);text-transform:inherit}.md3-segmented-button .md3-segmented-button__outline{border-color:var(--_outline-color)}.md3-segmented-button:disabled .md3-segmented-button__outline{border-color:var(--_disabled-outline-color)}.md3-segmented-button .md3-segmented-button__graphic,.md3-segmented-button .md3-segmented-button__checkmark,.md3-segmented-button .md3-segmented-button__icon,.md3-segmented-button .md3-segmented-button__icon ::slotted([slot=icon]){height:var(--_icon-size);width:var(--_icon-size);font-size:var(--_icon-size)}.md3-segmented-button.md3-segmented-button--with-icon.md3-segmented-button--with-label .md3-segmented-button__graphic,.md3-segmented-button.md3-segmented-button--selected.md3-segmented-button--with-label.md3-segmented-button--with-checkmark .md3-segmented-button__graphic,.md3-segmented-button.md3-segmented-button--selected.md3-segmented-button--without-label.md3-segmented-button--with-checkmark .md3-segmented-button__graphic{width:calc(var(--_icon-size) + 8px)}.md3-segmented-button .md3-segmented-button__label-text{font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight)}.md3-segmented-button.md3-segmented-button--selected:enabled .md3-segmented-button__label-text{color:var(--_selected-label-text-color)}.md3-segmented-button.md3-segmented-button--selected:enabled:hover .md3-segmented-button__label-text{color:var(--_selected-hover-label-text-color)}.md3-segmented-button.md3-segmented-button--selected:enabled:focus .md3-segmented-button__label-text{color:var(--_selected-focus-label-text-color)}.md3-segmented-button.md3-segmented-button--selected:enabled:active .md3-segmented-button__label-text{color:var(--_selected-pressed-label-text-color)}.md3-segmented-button.md3-segmented-button--unselected:enabled .md3-segmented-button__label-text{color:var(--_unselected-label-text-color)}.md3-segmented-button.md3-segmented-button--unselected:enabled:hover .md3-segmented-button__label-text{color:var(--_unselected-hover-label-text-color)}.md3-segmented-button.md3-segmented-button--unselected:enabled:focus .md3-segmented-button__label-text{color:var(--_unselected-focus-label-text-color)}.md3-segmented-button.md3-segmented-button--unselected:enabled:active .md3-segmented-button__label-text{color:var(--_unselected-pressed-label-text-color)}.md3-segmented-button:disabled .md3-segmented-button__label-text{color:var(--_disabled-label-text-color)}.md3-segmented-button--unselected{--md-ripple-hover-color: var(--_unselected-hover-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-color: var(--_unselected-pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}.md3-segmented-button--unselected .md3-segmented-button__icon{color:var(--_unselected-icon-color)}.md3-segmented-button--unselected:hover .md3-segmented-button__icon{color:var(--_unselected-hover-icon-color)}.md3-segmented-button--unselected:focus .md3-segmented-button__icon{color:var(--_unselected-focus-icon-color)}.md3-segmented-button--unselected:active .md3-segmented-button__icon{color:var(--_unselected-pressed-icon-color)}.md3-segmented-button--unselected:disabled .md3-segmented-button__icon{color:var(--_disabled-icon-color)}.md3-segmented-button--selected{background-color:var(--_selected-container-color);--md-ripple-hover-color: var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-color: var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}.md3-segmented-button--selected .md3-segmented-button__icon{color:var(--_selected-icon-color)}.md3-segmented-button--selected .md3-segmented-button__checkmark-path{stroke:var(--_selected-icon-color)}.md3-segmented-button--selected:hover .md3-segmented-button__checkmark-path{stroke:var(--_selected-hover-icon-color)}.md3-segmented-button--selected:focus .md3-segmented-button__checkmark-path{stroke:var(--_selected-focus-icon-color)}.md3-segmented-button--selected:active .md3-segmented-button__checkmark-path{stroke:var(--_selected-pressed-icon-color)}.md3-segmented-button--selected:disabled .md3-segmented-button__checkmark-path{stroke:var(--_disabled-icon-color)}.md3-segmented-button:enabled{cursor:pointer}.md3-segmented-button__focus-ring{z-index:1}.md3-segmented-button__ripple{border-radius:inherit;z-index:0}.md3-segmented-button__touch{position:absolute;top:50%;height:48px;left:50%;width:100%;transform:translate(-50%, -50%)}.md3-segmented-button__leading,.md3-segmented-button__graphic{display:inline-flex;justify-content:flex-start;align-items:center}.md3-segmented-button__graphic{position:relative;overflow:hidden}.md3-segmented-button__graphic{transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.md3-segmented-button--unselected.md3-segmented-button--with-label .md3-segmented-button__graphic,.md3-segmented-button--unselected.md3-segmented-button--without-label .md3-segmented-button__graphic,.md3-segmented-button--selected.md3-segmented-button--without-checkmark .md3-segmented-button__graphic{width:0}.md3-segmented-button--unselected .md3-segmented-button__checkmark{opacity:0}.md3-segmented-button--selected.md3-segmented-button--with-label .md3-segmented-button__icon{opacity:0}.md3-segmented-button--with-label .md3-segmented-button__checkmark{display:inline-flex;position:absolute}.md3-segmented-button__checkmark-path{stroke-width:2px;stroke-dasharray:29.7833385}.md3-segmented-button--selecting .md3-segmented-button__checkmark-path{stroke-dashoffset:29.7833385;animation:md3-segmented-button-checkmark-selection-draw-in;animation-duration:150ms;animation-delay:50ms;animation-fill-mode:forwards;animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.md3-segmented-button--selecting.md3-segmented-button--with-label .md3-segmented-button__icon{animation:md3-segmented-button-simple-fade-out;animation-duration:75ms;animation-timing-function:linear;animation-fill-mode:forwards}.md3-segmented-button--deselecting .md3-segmented-button__checkmark{animation:md3-segmented-button-simple-fade-out;animation-duration:50ms;animation-timing-function:linear;animation-fill-mode:forwards}.md3-segmented-button--deselecting.md3-segmented-button--with-label .md3-segmented-button__icon{opacity:0;animation:md3-segmented-button-simple-fade-in;animation-delay:50ms;animation-duration:150ms;animation-timing-function:linear;animation-fill-mode:forwards}\n`;\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {OutlinedSegmentedButton} from './internal/outlined-segmented-button.js';\nimport {styles as outlinedStyles} from './internal/outlined-styles.js';\nimport {styles as sharedStyles} from './internal/shared-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-outlined-segmented-button': MdOutlinedSegmentedButton;\n  }\n}\n\n/**\n * MdOutlinedSegmentedButton is the custom element for the Material\n * Design outlined segmented button component.\n * @final\n * @suppress {visibility}\n */\n@customElement('md-outlined-segmented-button')\nexport class MdOutlinedSegmentedButton extends OutlinedSegmentedButton {\n  static override styles: CSSResultOrNative[] = [sharedStyles, outlinedStyles];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, LitElement, nothing} from 'lit';\nimport {property, queryAssignedElements} from 'lit/decorators.js';\n\nimport {ARIAMixinStrict} from '../../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../../internal/aria/delegate.js';\nimport {SegmentedButton} from '../../segmentedbutton/internal/segmented-button.js';\n\n/**\n * SegmentedButtonSet is the parent component for two or more\n * `SegmentedButton` components. **Only** `SegmentedButton` components may be\n * used as children.\n *\n * @fires segmented-button-set-selection {CustomEvent<{button: SegmentedButton, selected: boolean, index: number}>}\n * Dispatched when a button is selected programattically with the\n * `setButtonSelected` or the `toggleSelection` methods as well as on user\n * interaction. --bubbles --composed\n */\nexport class SegmentedButtonSet extends LitElement {\n  static {\n    requestUpdateOnAriaChange(SegmentedButtonSet);\n  }\n\n  @property({type: Boolean}) multiselect = false;\n\n  @queryAssignedElements({flatten: true}) buttons!: SegmentedButton[];\n\n  getButtonDisabled(index: number): boolean {\n    if (this.indexOutOfBounds(index)) return false;\n    return this.buttons[index].disabled;\n  }\n\n  setButtonDisabled(index: number, disabled: boolean) {\n    if (this.indexOutOfBounds(index)) return;\n    this.buttons[index].disabled = disabled;\n  }\n\n  getButtonSelected(index: number): boolean {\n    if (this.indexOutOfBounds(index)) return false;\n    return this.buttons[index].selected;\n  }\n\n  setButtonSelected(index: number, selected: boolean) {\n    // Ignore out-of-index values.\n    if (this.indexOutOfBounds(index)) return;\n    // Ignore disabled buttons.\n    if (this.getButtonDisabled(index)) return;\n\n    if (this.multiselect) {\n      this.buttons[index].selected = selected;\n      this.emitSelectionEvent(index);\n      return;\n    }\n\n    // Single-select segmented buttons are not unselectable.\n    if (!selected) return;\n\n    this.buttons[index].selected = true;\n    this.emitSelectionEvent(index);\n    // Deselect all other buttons for single-select.\n    for (let i = 0; i < this.buttons.length; i++) {\n      if (i === index) continue;\n      this.buttons[i].selected = false;\n    }\n  }\n\n  private handleSegmentedButtonInteraction(event: CustomEvent) {\n    const index = this.buttons.indexOf(event.target as SegmentedButton);\n    this.toggleSelection(index);\n  }\n\n  private toggleSelection(index: number) {\n    if (this.indexOutOfBounds(index)) return;\n    this.setButtonSelected(index, !this.buttons[index].selected);\n  }\n\n  private indexOutOfBounds(index: number): boolean {\n    return index < 0 || index >= this.buttons.length;\n  }\n\n  private emitSelectionEvent(index: number) {\n    this.dispatchEvent(\n      new CustomEvent('segmented-button-set-selection', {\n        detail: {\n          button: this.buttons[index],\n          selected: this.buttons[index].selected,\n          index,\n        },\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n\n  protected override render() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <span\n        role=\"group\"\n        @segmented-button-interaction=\"${this.handleSegmentedButtonInteraction}\"\n        aria-label=${ariaLabel || nothing}\n        class=\"md3-segmented-button-set\">\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  protected getRenderClasses() {\n    return {};\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {SegmentedButtonSet} from './segmented-button-set.js';\n\n/**\n * b/265346443 - add docs\n */\nexport class OutlinedSegmentedButtonSet extends SegmentedButtonSet {\n  protected override getRenderClasses() {\n    return {\n      ...super.getRenderClasses(),\n      'md3-segmented-button-set--outlined': true,\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./labs/segmentedbuttonset/internal/outlined-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{--_container-height: var(--md-outlined-segmented-button-container-height, 40px);--_disabled-icon-color: var(--md-outlined-segmented-button-disabled-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-color: var(--md-outlined-segmented-button-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-color: var(--md-outlined-segmented-button-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-state-layer-opacity: var(--md-outlined-segmented-button-hover-state-layer-opacity, 0.08);--_label-text-font: var(--md-outlined-segmented-button-label-text-font, var(--md-sys-typescale-label-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-segmented-button-label-text-line-height, var(--md-sys-typescale-label-large-line-height, 1.25rem));--_label-text-size: var(--md-outlined-segmented-button-label-text-size, var(--md-sys-typescale-label-large-size, 0.875rem));--_label-text-weight: var(--md-outlined-segmented-button-label-text-weight, var(--md-sys-typescale-label-large-weight, var(--md-ref-typeface-weight-medium, 500)));--_outline-color: var(--md-outlined-segmented-button-outline-color, var(--md-sys-color-outline, #79747e));--_pressed-state-layer-opacity: var(--md-outlined-segmented-button-pressed-state-layer-opacity, 0.12);--_selected-container-color: var(--md-outlined-segmented-button-selected-container-color, var(--md-sys-color-secondary-container, #e8def8));--_selected-focus-icon-color: var(--md-outlined-segmented-button-selected-focus-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-focus-label-text-color: var(--md-outlined-segmented-button-selected-focus-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-icon-color: var(--md-outlined-segmented-button-selected-hover-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-label-text-color: var(--md-outlined-segmented-button-selected-hover-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-hover-state-layer-color: var(--md-outlined-segmented-button-selected-hover-state-layer-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-label-text-color: var(--md-outlined-segmented-button-selected-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-icon-color: var(--md-outlined-segmented-button-selected-pressed-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-label-text-color: var(--md-outlined-segmented-button-selected-pressed-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b));--_selected-pressed-state-layer-color: var(--md-outlined-segmented-button-selected-pressed-state-layer-color, var(--md-sys-color-on-secondary-container, #1d192b));--_unselected-focus-icon-color: var(--md-outlined-segmented-button-unselected-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-focus-label-text-color: var(--md-outlined-segmented-button-unselected-focus-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-icon-color: var(--md-outlined-segmented-button-unselected-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-label-text-color: var(--md-outlined-segmented-button-unselected-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-hover-state-layer-color: var(--md-outlined-segmented-button-unselected-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-label-text-color: var(--md-outlined-segmented-button-unselected-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-icon-color: var(--md-outlined-segmented-button-unselected-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-label-text-color: var(--md-outlined-segmented-button-unselected-pressed-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_unselected-pressed-state-layer-color: var(--md-outlined-segmented-button-unselected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_icon-size: var(--md-outlined-segmented-button-icon-size, 18px);--_selected-icon-color: var(--md-outlined-segmented-button-selected-icon-color, var(--md-sys-color-on-secondary-container, #1d192b));--_unselected-icon-color: var(--md-outlined-segmented-button-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_shape-start-start: var(--md-outlined-segmented-button-shape-start-start, var(--md-outlined-segmented-button-shape, var(--md-sys-shape-corner-full, 9999px)));--_shape-start-end: var(--md-outlined-segmented-button-shape-start-end, var(--md-outlined-segmented-button-shape, var(--md-sys-shape-corner-full, 9999px)));--_shape-end-end: var(--md-outlined-segmented-button-shape-end-end, var(--md-outlined-segmented-button-shape, var(--md-sys-shape-corner-full, 9999px)));--_shape-end-start: var(--md-outlined-segmented-button-shape-end-start, var(--md-outlined-segmented-button-shape, var(--md-sys-shape-corner-full, 9999px)))}\n`;\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./labs/segmentedbuttonset/internal/shared-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{display:flex;outline:none}.md3-segmented-button-set{display:grid;grid-auto-columns:1fr;grid-auto-flow:column;grid-auto-rows:auto;width:100%;height:var(--_container-height)}.md3-segmented-button-set ::slotted(:first-child){border-start-start-radius:var(--_shape-start-start);border-end-start-radius:var(--_shape-end-start)}.md3-segmented-button-set ::slotted(:last-child){border-start-end-radius:var(--_shape-start-end);border-end-end-radius:var(--_shape-end-end)}\n`;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {OutlinedSegmentedButtonSet} from './internal/outlined-segmented-button-set.js';\nimport {styles as outlinedStyles} from './internal/outlined-styles.js';\nimport {styles as sharedStyles} from './internal/shared-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-outlined-segmented-button-set': MdOutlinedSegmentedButtonSet;\n  }\n}\n\n/**\n * MdOutlinedSegmentedButtonSet is the custom element for the Material\n * Design outlined segmented button set component.\n * @final\n * @suppress {visibility}\n */\n@customElement('md-outlined-segmented-button-set')\nexport class MdOutlinedSegmentedButtonSet extends OutlinedSegmentedButtonSet {\n  static override styles: CSSResultOrNative[] = [sharedStyles, outlinedStyles];\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./slider/internal/forced-colors-styles.css.\nimport {css} from 'lit';\nexport const styles = css`@media(forced-colors: active){:host{--md-slider-active-track-color: CanvasText;--md-slider-disabled-active-track-color: GrayText;--md-slider-disabled-active-track-opacity: 1;--md-slider-disabled-handle-color: GrayText;--md-slider-disabled-inactive-track-color: GrayText;--md-slider-disabled-inactive-track-opacity: 1;--md-slider-focus-handle-color: CanvasText;--md-slider-handle-color: CanvasText;--md-slider-handle-shadow-color: Canvas;--md-slider-hover-handle-color: CanvasText;--md-slider-hover-state-layer-color: Canvas;--md-slider-hover-state-layer-opacity: 1;--md-slider-inactive-track-color: Canvas;--md-slider-label-container-color: Canvas;--md-slider-label-text-color: CanvasText;--md-slider-pressed-handle-color: CanvasText;--md-slider-pressed-state-layer-color: Canvas;--md-slider-pressed-state-layer-opacity: 1;--md-slider-with-overlap-handle-outline-color: CanvasText}.label,.label::before{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}:host(:not([disabled])) .track::before{border:1px solid var(--_active-track-color)}.tickmarks::before{background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='CanvasText'%3E%3Ccircle cx='2' cy='2'  r='1'/%3E%3C/svg%3E\")}.tickmarks::after{background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='Canvas'%3E%3Ccircle cx='2' cy='2' r='1'/%3E%3C/svg%3E\")}:host([disabled]) .tickmarks::before{background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='Canvas'%3E%3Ccircle cx='2' cy='2'  r='1'/%3E%3C/svg%3E\")}}\n`;\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * When `condition` is true, returns the result of calling `trueCase()`, else\n * returns the result of calling `falseCase()` if `falseCase` is defined.\n *\n * This is a convenience wrapper around a ternary expression that makes it a\n * little nicer to write an inline conditional without an else.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n *   `;\n * }\n * ```\n */\nexport function when<T, F>(\n  condition: true,\n  trueCase: () => T,\n  falseCase?: () => F\n): T;\nexport function when<T, F = undefined>(\n  condition: false,\n  trueCase: () => T,\n  falseCase?: () => F\n): F;\nexport function when<T, F = undefined>(\n  condition: unknown,\n  trueCase: () => T,\n  falseCase?: () => F\n): T | F;\nexport function when(\n  condition: unknown,\n  trueCase: () => unknown,\n  falseCase?: () => unknown\n): unknown {\n  return condition ? trueCase() : falseCase?.();\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../elevation/elevation.js';\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, isServer, LitElement, nothing, PropertyValues} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {styleMap} from 'lit/directives/style-map.js';\nimport {when} from 'lit/directives/when.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\nimport {\n  dispatchActivationClick,\n  isActivationClick,\n} from '../../internal/events/form-label-activation.js';\nimport {redispatchEvent} from '../../internal/events/redispatch-event.js';\nimport {mixinElementInternals} from '../../labs/behaviors/element-internals.js';\nimport {\n  getFormValue,\n  mixinFormAssociated,\n} from '../../labs/behaviors/form-associated.js';\nimport {MdRipple} from '../../ripple/ripple.js';\n\n// Disable warning for classMap with destructuring\n// tslint:disable:no-implicit-dictionary-conversion\n\n// Separate variable needed for closure.\nconst sliderBaseClass = mixinFormAssociated(mixinElementInternals(LitElement));\n\n/**\n * Slider component.\n *\n *\n * @fires change {Event} The native `change` event on\n * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n * --bubbles\n * @fires input {InputEvent} The native `input` event on\n * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)\n * --bubbles --composed\n */\nexport class Slider extends sliderBaseClass {\n  static {\n    requestUpdateOnAriaChange(Slider);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions: ShadowRootInit = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * The slider minimum value\n   */\n  @property({type: Number}) min = 0;\n\n  /**\n   * The slider maximum value\n   */\n  @property({type: Number}) max = 100;\n\n  /**\n   * The slider value displayed when range is false.\n   */\n  @property({type: Number}) value?: number;\n\n  /**\n   * The slider start value displayed when range is true.\n   */\n  @property({type: Number, attribute: 'value-start'}) valueStart?: number;\n\n  /**\n   * The slider end value displayed when range is true.\n   */\n  @property({type: Number, attribute: 'value-end'}) valueEnd?: number;\n\n  /**\n   * An optional label for the slider's value displayed when range is\n   * false; if not set, the label is the value itself.\n   */\n  @property({attribute: 'value-label'}) valueLabel = '';\n\n  /**\n   * An optional label for the slider's start value displayed when\n   * range is true; if not set, the label is the valueStart itself.\n   */\n  @property({attribute: 'value-label-start'}) valueLabelStart = '';\n\n  /**\n   * An optional label for the slider's end value displayed when\n   * range is true; if not set, the label is the valueEnd itself.\n   */\n  @property({attribute: 'value-label-end'}) valueLabelEnd = '';\n\n  /**\n   * Aria label for the slider's start handle displayed when\n   * range is true.\n   */\n  @property({attribute: 'aria-label-start'}) ariaLabelStart = '';\n\n  /**\n   * Aria value text for the slider's start value displayed when\n   * range is true.\n   */\n  @property({attribute: 'aria-valuetext-start'}) ariaValueTextStart = '';\n\n  /**\n   * Aria label for the slider's end handle displayed when\n   * range is true.\n   */\n  @property({attribute: 'aria-label-end'}) ariaLabelEnd = '';\n\n  /**\n   * Aria value text for the slider's end value displayed when\n   * range is true.\n   */\n  @property({attribute: 'aria-valuetext-end'}) ariaValueTextEnd = '';\n\n  /**\n   * The step between values.\n   */\n  @property({type: Number}) step = 1;\n\n  /**\n   * Whether or not to show tick marks.\n   */\n  @property({type: Boolean}) ticks = false;\n\n  /**\n   * Whether or not to show a value label when activated.\n   */\n  @property({type: Boolean}) labeled = false;\n\n  /**\n   * Whether or not to show a value range. When false, the slider displays\n   * a slideable handle for the value property; when true, it displays\n   * slideable handles for the valueStart and valueEnd properties.\n   */\n  @property({type: Boolean}) range = false;\n\n  /**\n   * The HTML name to use in form submission for a range slider's starting\n   * value. Use `name` instead if both the start and end values should use the\n   * same name.\n   */\n  get nameStart() {\n    return this.getAttribute('name-start') ?? this.name;\n  }\n  set nameStart(name: string) {\n    this.setAttribute('name-start', name);\n  }\n\n  /**\n   * The HTML name to use in form submission for a range slider's ending value.\n   * Use `name` instead if both the start and end values should use the same\n   * name.\n   */\n  get nameEnd() {\n    return this.getAttribute('name-end') ?? this.nameStart;\n  }\n  set nameEnd(name: string) {\n    this.setAttribute('name-end', name);\n  }\n\n  @query('input.start') private readonly inputStart!: HTMLInputElement | null;\n  @query('.handle.start') private readonly handleStart!: HTMLDivElement | null;\n  @queryAsync('md-ripple.start')\n  private readonly rippleStart!: Promise<MdRipple | null>;\n\n  @query('input.end') private readonly inputEnd!: HTMLInputElement | null;\n  @query('.handle.end') private readonly handleEnd!: HTMLDivElement | null;\n  @queryAsync('md-ripple.end')\n  private readonly rippleEnd!: Promise<MdRipple | null>;\n\n  // handle hover/pressed states are set manually since the handle\n  // does not receive pointer events so that the native inputs are\n  // interaction targets.\n  @state() private handleStartHover = false;\n  @state() private handleEndHover = false;\n\n  @state() private startOnTop = false;\n  @state() private handlesOverlapping = false;\n\n  @state() private renderValueStart?: number;\n  @state() private renderValueEnd?: number;\n\n  // Note: start aria-* properties are only applied when range=true, which is\n  // why they do not need to handle both cases.\n  private get renderAriaLabelStart() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return (\n      this.ariaLabelStart ||\n      (ariaLabel && `${ariaLabel} start`) ||\n      this.valueLabelStart ||\n      String(this.valueStart)\n    );\n  }\n\n  private get renderAriaValueTextStart() {\n    return (\n      this.ariaValueTextStart || this.valueLabelStart || String(this.valueStart)\n    );\n  }\n\n  // Note: end aria-* properties are applied for single and range sliders, which\n  // is why it needs to handle `this.range` (while start aria-* properties do\n  // not).\n  private get renderAriaLabelEnd() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    if (this.range) {\n      return (\n        this.ariaLabelEnd ||\n        (ariaLabel && `${ariaLabel} end`) ||\n        this.valueLabelEnd ||\n        String(this.valueEnd)\n      );\n    }\n\n    return ariaLabel || this.valueLabel || String(this.value);\n  }\n\n  private get renderAriaValueTextEnd() {\n    if (this.range) {\n      return (\n        this.ariaValueTextEnd || this.valueLabelEnd || String(this.valueEnd)\n      );\n    }\n\n    // Needed for conformance\n    const {ariaValueText} = this as ARIAMixinStrict;\n    return ariaValueText || this.valueLabel || String(this.value);\n  }\n\n  // used in synthetic events generated to control ripple hover state.\n  private ripplePointerId = 1;\n\n  // flag to prevent processing of re-dispatched input event.\n  private isRedispatchingEvent = false;\n\n  private action?: Action;\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.addEventListener('click', (event: MouseEvent) => {\n        if (!isActivationClick(event) || !this.inputEnd) {\n          return;\n        }\n        this.focus();\n        dispatchActivationClick(this.inputEnd);\n      });\n    }\n  }\n\n  override focus() {\n    this.inputEnd?.focus();\n  }\n\n  protected override willUpdate(changed: PropertyValues) {\n    this.renderValueStart = changed.has('valueStart')\n      ? this.valueStart\n      : this.inputStart?.valueAsNumber;\n    const endValueChanged =\n      (changed.has('valueEnd') && this.range) || changed.has('value');\n    this.renderValueEnd = endValueChanged\n      ? this.range\n        ? this.valueEnd\n        : this.value\n      : this.inputEnd?.valueAsNumber;\n    // manually handle ripple hover state since the handle is pointer events\n    // none.\n    if (changed.get('handleStartHover') !== undefined) {\n      this.toggleRippleHover(this.rippleStart, this.handleStartHover);\n    } else if (changed.get('handleEndHover') !== undefined) {\n      this.toggleRippleHover(this.rippleEnd, this.handleEndHover);\n    }\n  }\n\n  protected override updated(changed: PropertyValues) {\n    // Validate input rendered value and re-render if necessary. This ensures\n    // the rendred handle stays in sync with the input thumb which is used for\n    // interaction. These can get out of sync if a supplied value does not\n    // map to an exactly stepped value between min and max.\n    if (this.range) {\n      this.renderValueStart = this.inputStart!.valueAsNumber;\n    }\n    this.renderValueEnd = this.inputEnd!.valueAsNumber;\n    // update values if they are unset\n    // when using a range, default to equi-distant between\n    // min - valueStart - valueEnd - max\n    if (this.range) {\n      const segment = (this.max - this.min) / 3;\n      if (this.valueStart === undefined) {\n        this.inputStart!.valueAsNumber = this.min + segment;\n        // read actual value from input\n        const v = this.inputStart!.valueAsNumber;\n        this.valueStart = this.renderValueStart = v;\n      }\n      if (this.valueEnd === undefined) {\n        this.inputEnd!.valueAsNumber = this.min + 2 * segment;\n        // read actual value from input\n        const v = this.inputEnd!.valueAsNumber;\n        this.valueEnd = this.renderValueEnd = v;\n      }\n    } else {\n      this.value ??= this.renderValueEnd;\n    }\n    if (\n      changed.has('range') ||\n      changed.has('renderValueStart') ||\n      changed.has('renderValueEnd') ||\n      this.isUpdatePending\n    ) {\n      // Only check if the handle nubs are overlapping, as the ripple touch\n      // target extends subtantially beyond the boundary of the handle nub.\n      const startNub = this.handleStart?.querySelector('.handleNub');\n      const endNub = this.handleEnd?.querySelector('.handleNub');\n      this.handlesOverlapping = isOverlapping(startNub, endNub);\n    }\n    // called to finish the update imediately;\n    // note, this is a no-op unless an update is scheduled\n    this.performUpdate();\n  }\n\n  protected override render() {\n    const step = this.step === 0 ? 1 : this.step;\n    const range = Math.max(this.max - this.min, step);\n    const startFraction = this.range\n      ? ((this.renderValueStart ?? this.min) - this.min) / range\n      : 0;\n    const endFraction = ((this.renderValueEnd ?? this.min) - this.min) / range;\n    const containerStyles = {\n      // for clipping inputs and active track.\n      '--_start-fraction': String(startFraction),\n      '--_end-fraction': String(endFraction),\n      // for generating tick marks\n      '--_tick-count': String(range / step),\n    };\n    const containerClasses = {ranged: this.range};\n\n    // optional label values to show in place of the value.\n    const labelStart = this.valueLabelStart || String(this.renderValueStart);\n    const labelEnd =\n      (this.range ? this.valueLabelEnd : this.valueLabel) ||\n      String(this.renderValueEnd);\n\n    const inputStartProps = {\n      start: true,\n      value: this.renderValueStart,\n      ariaLabel: this.renderAriaLabelStart,\n      ariaValueText: this.renderAriaValueTextStart,\n      ariaMin: this.min,\n      ariaMax: this.valueEnd ?? this.max,\n    };\n\n    const inputEndProps = {\n      start: false,\n      value: this.renderValueEnd,\n      ariaLabel: this.renderAriaLabelEnd,\n      ariaValueText: this.renderAriaValueTextEnd,\n      ariaMin: this.range ? this.valueStart ?? this.min : this.min,\n      ariaMax: this.max,\n    };\n\n    const handleStartProps = {\n      start: true,\n      hover: this.handleStartHover,\n      label: labelStart,\n    };\n\n    const handleEndProps = {\n      start: false,\n      hover: this.handleEndHover,\n      label: labelEnd,\n    };\n\n    const handleContainerClasses = {\n      hover: this.handleStartHover || this.handleEndHover,\n    };\n\n    return html` <div\n      class=\"container ${classMap(containerClasses)}\"\n      style=${styleMap(containerStyles)}>\n      ${when(this.range, () => this.renderInput(inputStartProps))}\n      ${this.renderInput(inputEndProps)} ${this.renderTrack()}\n      <div class=\"handleContainerPadded\">\n        <div class=\"handleContainerBlock\">\n          <div class=\"handleContainer ${classMap(handleContainerClasses)}\">\n            ${when(this.range, () => this.renderHandle(handleStartProps))}\n            ${this.renderHandle(handleEndProps)}\n          </div>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  private renderTrack() {\n    return html`\n      <div class=\"track\"></div>\n      ${this.ticks ? html`<div class=\"tickmarks\"></div>` : nothing}\n    `;\n  }\n\n  private renderLabel(value: string) {\n    return html`<div class=\"label\" aria-hidden=\"true\">\n      <span class=\"labelContent\" part=\"label\">${value}</span>\n    </div>`;\n  }\n\n  private renderHandle({\n    start,\n    hover,\n    label,\n  }: {\n    start: boolean;\n    hover: boolean;\n    label: string;\n  }) {\n    const onTop = !this.disabled && start === this.startOnTop;\n    const isOverlapping = !this.disabled && this.handlesOverlapping;\n    const name = start ? 'start' : 'end';\n    return html`<div\n      class=\"handle ${classMap({\n        [name]: true,\n        hover,\n        onTop,\n        isOverlapping,\n      })}\">\n      <md-focus-ring part=\"focus-ring\" for=${name}></md-focus-ring>\n      <md-ripple\n        for=${name}\n        class=${name}\n        ?disabled=${this.disabled}></md-ripple>\n      <div class=\"handleNub\">\n        <md-elevation part=\"elevation\"></md-elevation>\n      </div>\n      ${when(this.labeled, () => this.renderLabel(label))}\n    </div>`;\n  }\n\n  private renderInput({\n    start,\n    value,\n    ariaLabel,\n    ariaValueText,\n    ariaMin,\n    ariaMax,\n  }: {\n    start: boolean;\n    value?: number;\n    ariaLabel: string;\n    ariaValueText: string;\n    ariaMin: number;\n    ariaMax: number;\n  }) {\n    // Slider requires min/max set to the overall min/max for both inputs.\n    // This is reported to screen readers, which is why we need aria-valuemin\n    // and aria-valuemax.\n    const name = start ? `start` : `end`;\n    return html`<input\n      type=\"range\"\n      class=\"${classMap({\n        start,\n        end: !start,\n      })}\"\n      @focus=${this.handleFocus}\n      @pointerdown=${this.handleDown}\n      @pointerup=${this.handleUp}\n      @pointerenter=${this.handleEnter}\n      @pointermove=${this.handleMove}\n      @pointerleave=${this.handleLeave}\n      @keydown=${this.handleKeydown}\n      @keyup=${this.handleKeyup}\n      @input=${this.handleInput}\n      @change=${this.handleChange}\n      id=${name}\n      .disabled=${this.disabled}\n      .min=${String(this.min)}\n      aria-valuemin=${ariaMin}\n      .max=${String(this.max)}\n      aria-valuemax=${ariaMax}\n      .step=${String(this.step)}\n      .value=${String(value)}\n      .tabIndex=${start ? 1 : 0}\n      aria-label=${ariaLabel || nothing}\n      aria-valuetext=${ariaValueText} />`;\n  }\n\n  private async toggleRippleHover(\n    ripple: Promise<MdRipple | null>,\n    hovering: boolean,\n  ) {\n    const rippleEl = await ripple;\n    if (!rippleEl) {\n      return;\n    }\n    // TODO(b/269799771): improve slider ripple connection\n    if (hovering) {\n      rippleEl.handlePointerenter(\n        new PointerEvent('pointerenter', {\n          isPrimary: true,\n          pointerId: this.ripplePointerId,\n        }),\n      );\n    } else {\n      rippleEl.handlePointerleave(\n        new PointerEvent('pointerleave', {\n          isPrimary: true,\n          pointerId: this.ripplePointerId,\n        }),\n      );\n    }\n  }\n\n  private handleFocus(event: Event) {\n    this.updateOnTop(event.target as HTMLInputElement);\n  }\n\n  private startAction(event: Event) {\n    const target = event.target as HTMLInputElement;\n    const fixed =\n      target === this.inputStart ? this.inputEnd! : this.inputStart!;\n    this.action = {\n      canFlip: event.type === 'pointerdown',\n      flipped: false,\n      target,\n      fixed,\n      values: new Map([\n        [target, target.valueAsNumber],\n        [fixed, fixed?.valueAsNumber],\n      ]),\n    };\n  }\n\n  private finishAction(event: Event) {\n    this.action = undefined;\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    this.startAction(event);\n  }\n\n  private handleKeyup(event: KeyboardEvent) {\n    this.finishAction(event);\n  }\n\n  private handleDown(event: PointerEvent) {\n    this.startAction(event);\n    this.ripplePointerId = event.pointerId;\n    const isStart = (event.target as HTMLInputElement) === this.inputStart;\n    // Since handle moves to pointer on down and there may not be a move,\n    // it needs to be considered hovered..\n    this.handleStartHover =\n      !this.disabled && isStart && Boolean(this.handleStart);\n    this.handleEndHover = !this.disabled && !isStart && Boolean(this.handleEnd);\n  }\n\n  private async handleUp(event: PointerEvent) {\n    if (!this.action) {\n      return;\n    }\n\n    const {target, values, flipped} = this.action;\n    //  Async here for Firefox because input can be after pointerup\n    //  when value is calmped.\n    await new Promise(requestAnimationFrame);\n    if (target !== undefined) {\n      // Ensure Safari focuses input so label renders.\n      // Ensure any flipped input is focused so the tab order is right.\n      target.focus();\n      // When action is flipped, change must be fired manually since the\n      // real event target did not change.\n      if (flipped && target.valueAsNumber !== values.get(target)!) {\n        target.dispatchEvent(new Event('change', {bubbles: true}));\n      }\n    }\n    this.finishAction(event);\n  }\n\n  /**\n   * The move handler tracks handle hovering to facilitate proper ripple\n   * behavior on the slider handle. This is needed because user interaction with\n   * the native input is leveraged to position the handle. Because the separate\n   * displayed handle element has pointer events disabled (to allow interaction\n   * with the input) and the input's handle is a pseudo-element, neither can be\n   * the ripple's interactive element. Therefore the input is the ripple's\n   * interactive element and has a `ripple` directive; however the ripple\n   * is gated on the handle being hovered. In addition, because the ripple\n   * hover state is being specially handled, it must be triggered independent\n   * of the directive. This is done based on the hover state when the\n   * slider is updated.\n   */\n  private handleMove(event: PointerEvent) {\n    this.handleStartHover = !this.disabled && inBounds(event, this.handleStart);\n    this.handleEndHover = !this.disabled && inBounds(event, this.handleEnd);\n  }\n\n  private handleEnter(event: PointerEvent) {\n    this.handleMove(event);\n  }\n\n  private handleLeave() {\n    this.handleStartHover = false;\n    this.handleEndHover = false;\n  }\n\n  private updateOnTop(input: HTMLInputElement) {\n    this.startOnTop = input.classList.contains('start');\n  }\n\n  private needsClamping() {\n    if (!this.action) {\n      return false;\n    }\n\n    const {target, fixed} = this.action;\n    const isStart = target === this.inputStart;\n    return isStart\n      ? target.valueAsNumber > fixed.valueAsNumber\n      : target.valueAsNumber < fixed.valueAsNumber;\n  }\n\n  // if start/end start coincident and the first drag input would e.g. move\n  // start > end, avoid clamping and \"flip\" to use the other input\n  // as the action target.\n  private isActionFlipped() {\n    const {action} = this;\n    if (!action) {\n      return false;\n    }\n\n    const {target, fixed, values} = action;\n    if (action.canFlip) {\n      const coincident = values.get(target) === values.get(fixed);\n      if (coincident && this.needsClamping()) {\n        action.canFlip = false;\n        action.flipped = true;\n        action.target = fixed;\n        action.fixed = target;\n      }\n    }\n    return action.flipped;\n  }\n\n  // when flipped, apply the drag input to the flipped target and reset\n  // the actual target.\n  private flipAction() {\n    if (!this.action) {\n      return false;\n    }\n\n    const {target, fixed, values} = this.action;\n    const changed = target.valueAsNumber !== fixed.valueAsNumber;\n    target.valueAsNumber = fixed.valueAsNumber;\n    fixed.valueAsNumber = values.get(fixed)!;\n    return changed;\n  }\n\n  // clamp such that start does not move beyond end and visa versa.\n  private clampAction() {\n    if (!this.needsClamping() || !this.action) {\n      return false;\n    }\n    const {target, fixed} = this.action;\n    target.valueAsNumber = fixed.valueAsNumber;\n    return true;\n  }\n\n  private handleInput(event: InputEvent) {\n    // avoid processing a re-dispatched event\n    if (this.isRedispatchingEvent) {\n      return;\n    }\n    let stopPropagation = false;\n    let redispatch = false;\n    if (this.range) {\n      if (this.isActionFlipped()) {\n        stopPropagation = true;\n        redispatch = this.flipAction();\n      }\n      if (this.clampAction()) {\n        stopPropagation = true;\n        redispatch = false;\n      }\n    }\n    const target = event.target as HTMLInputElement;\n    this.updateOnTop(target);\n    // update value only on interaction\n    if (this.range) {\n      this.valueStart = this.inputStart!.valueAsNumber;\n      this.valueEnd = this.inputEnd!.valueAsNumber;\n    } else {\n      this.value = this.inputEnd!.valueAsNumber;\n    }\n    // control external visibility of input event\n    if (stopPropagation) {\n      event.stopPropagation();\n    }\n    // ensure event path is correct when flipped.\n    if (redispatch) {\n      this.isRedispatchingEvent = true;\n      redispatchEvent(target, event);\n      this.isRedispatchingEvent = false;\n    }\n  }\n\n  private handleChange(event: Event) {\n    // prevent keyboard triggered changes from dispatching for\n    // clamped values; note, this only occurs for keyboard\n    const changeTarget = event.target as HTMLInputElement;\n    const {target, values} = this.action ?? {};\n    const squelch =\n      target && target.valueAsNumber === values!.get(changeTarget)!;\n    if (!squelch) {\n      redispatchEvent(this, event);\n    }\n    // ensure keyboard triggered change clears action.\n    this.finishAction(event);\n  }\n\n  // Writable mixin properties for lit-html binding, needed for lit-analyzer\n  declare disabled: boolean;\n  declare name: string;\n\n  override [getFormValue]() {\n    if (this.range) {\n      const data = new FormData();\n      data.append(this.nameStart, String(this.valueStart));\n      data.append(this.nameEnd, String(this.valueEnd));\n      return data;\n    }\n\n    return String(this.value);\n  }\n\n  override formResetCallback() {\n    if (this.range) {\n      const valueStart = this.getAttribute('value-start');\n      this.valueStart = valueStart !== null ? Number(valueStart) : undefined;\n      const valueEnd = this.getAttribute('value-end');\n      this.valueEnd = valueEnd !== null ? Number(valueEnd) : undefined;\n      return;\n    }\n    const value = this.getAttribute('value');\n    this.value = value !== null ? Number(value) : undefined;\n  }\n\n  override formStateRestoreCallback(\n    state: string | Array<[string, string]> | null,\n  ) {\n    if (Array.isArray(state)) {\n      const [[, valueStart], [, valueEnd]] = state;\n      this.valueStart = Number(valueStart);\n      this.valueEnd = Number(valueEnd);\n      this.range = true;\n      return;\n    }\n\n    this.value = Number(state);\n    this.range = false;\n  }\n}\n\nfunction inBounds({x, y}: PointerEvent, element?: HTMLElement | null) {\n  if (!element) {\n    return false;\n  }\n  const {top, left, bottom, right} = element.getBoundingClientRect();\n  return x >= left && x <= right && y >= top && y <= bottom;\n}\n\nfunction isOverlapping(\n  elA: Element | null | undefined,\n  elB: Element | null | undefined,\n) {\n  if (!(elA && elB)) {\n    return false;\n  }\n  const a = elA.getBoundingClientRect();\n  const b = elB.getBoundingClientRect();\n  return !(\n    a.top > b.bottom ||\n    a.right < b.left ||\n    a.bottom < b.top ||\n    a.left > b.right\n  );\n}\n\ninterface Action {\n  canFlip: boolean;\n  flipped: boolean;\n  target: HTMLInputElement;\n  fixed: HTMLInputElement;\n  values: Map<HTMLInputElement | undefined, number | undefined>;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./slider/internal/slider-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{--_active-track-color: var(--md-slider-active-track-color, var(--md-sys-color-primary, #6750a4));--_active-track-height: var(--md-slider-active-track-height, 4px);--_active-track-shape: var(--md-slider-active-track-shape, var(--md-sys-shape-corner-full, 9999px));--_disabled-active-track-color: var(--md-slider-disabled-active-track-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-active-track-opacity: var(--md-slider-disabled-active-track-opacity, 0.38);--_disabled-handle-color: var(--md-slider-disabled-handle-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-handle-elevation: var(--md-slider-disabled-handle-elevation, 0);--_disabled-inactive-track-color: var(--md-slider-disabled-inactive-track-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-inactive-track-opacity: var(--md-slider-disabled-inactive-track-opacity, 0.12);--_focus-handle-color: var(--md-slider-focus-handle-color, var(--md-sys-color-primary, #6750a4));--_handle-color: var(--md-slider-handle-color, var(--md-sys-color-primary, #6750a4));--_handle-elevation: var(--md-slider-handle-elevation, 1);--_handle-height: var(--md-slider-handle-height, 20px);--_handle-shadow-color: var(--md-slider-handle-shadow-color, var(--md-sys-color-shadow, #000));--_handle-shape: var(--md-slider-handle-shape, var(--md-sys-shape-corner-full, 9999px));--_handle-width: var(--md-slider-handle-width, 20px);--_hover-handle-color: var(--md-slider-hover-handle-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-color: var(--md-slider-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-opacity: var(--md-slider-hover-state-layer-opacity, 0.08);--_inactive-track-color: var(--md-slider-inactive-track-color, var(--md-sys-color-surface-container-highest, #e6e0e9));--_inactive-track-height: var(--md-slider-inactive-track-height, 4px);--_inactive-track-shape: var(--md-slider-inactive-track-shape, var(--md-sys-shape-corner-full, 9999px));--_label-container-color: var(--md-slider-label-container-color, var(--md-sys-color-primary, #6750a4));--_label-container-height: var(--md-slider-label-container-height, 28px);--_pressed-handle-color: var(--md-slider-pressed-handle-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-color: var(--md-slider-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-opacity: var(--md-slider-pressed-state-layer-opacity, 0.12);--_state-layer-size: var(--md-slider-state-layer-size, 40px);--_with-overlap-handle-outline-color: var(--md-slider-with-overlap-handle-outline-color, var(--md-sys-color-on-primary, #fff));--_with-overlap-handle-outline-width: var(--md-slider-with-overlap-handle-outline-width, 1px);--_with-tick-marks-active-container-color: var(--md-slider-with-tick-marks-active-container-color, var(--md-sys-color-on-primary, #fff));--_with-tick-marks-container-size: var(--md-slider-with-tick-marks-container-size, 2px);--_with-tick-marks-disabled-container-color: var(--md-slider-with-tick-marks-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));--_with-tick-marks-inactive-container-color: var(--md-slider-with-tick-marks-inactive-container-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-slider-label-text-color, var(--md-sys-color-on-primary, #fff));--_label-text-font: var(--md-slider-label-text-font, var(--md-sys-typescale-label-medium-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-slider-label-text-line-height, var(--md-sys-typescale-label-medium-line-height, 1rem));--_label-text-size: var(--md-slider-label-text-size, var(--md-sys-typescale-label-medium-size, 0.75rem));--_label-text-weight: var(--md-slider-label-text-weight, var(--md-sys-typescale-label-medium-weight, var(--md-ref-typeface-weight-medium, 500)));--_start-fraction: 0;--_end-fraction: 0;--_tick-count: 0;display:inline-flex;vertical-align:middle;min-inline-size:200px;--md-elevation-level: var(--_handle-elevation);--md-elevation-shadow-color: var(--_handle-shadow-color)}md-focus-ring{height:48px;inset:unset;width:48px}md-elevation{transition-duration:250ms}@media(prefers-reduced-motion){.label{transition-duration:0}}:host([disabled]){opacity:var(--_disabled-active-track-opacity);--md-elevation-level: var(--_disabled-handle-elevation)}.container{flex:1;display:flex;align-items:center;position:relative;block-size:var(--_state-layer-size);pointer-events:none;touch-action:none}.track,.tickmarks{position:absolute;inset:0;display:flex;align-items:center}.track::before,.tickmarks::before,.track::after,.tickmarks::after{position:absolute;content:\"\";inset-inline-start:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));inset-inline-end:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));background-size:calc((100% - var(--_with-tick-marks-container-size)*2)/var(--_tick-count)) 100%}.track::before,.tickmarks::before{block-size:var(--_inactive-track-height);border-radius:var(--_inactive-track-shape)}.track::before{background:var(--_inactive-track-color)}.tickmarks::before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-inactive-container-color) 0, var(--_with-tick-marks-inactive-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}:host([disabled]) .track::before{opacity:calc(1/var(--_disabled-active-track-opacity)*var(--_disabled-inactive-track-opacity));background:var(--_disabled-inactive-track-color)}.track::after,.tickmarks::after{block-size:var(--_active-track-height);border-radius:var(--_active-track-shape);clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))) 0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)))}.track::after{background:var(--_active-track-color)}.tickmarks::after{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-active-container-color) 0, var(--_with-tick-marks-active-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}.track:dir(rtl)::after{clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))))}.tickmarks:dir(rtl)::after{clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))))}:host([disabled]) .track::after{background:var(--_disabled-active-track-color)}:host([disabled]) .tickmarks::before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-disabled-container-color) 0, var(--_with-tick-marks-disabled-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}.handleContainerPadded{position:relative;block-size:100%;inline-size:100%;padding-inline:calc(var(--_state-layer-size)/2)}.handleContainerBlock{position:relative;block-size:100%;inline-size:100%}.handleContainer{position:absolute;inset-block-start:0;inset-block-end:0;inset-inline-start:calc(100%*var(--_start-fraction));inline-size:calc(100%*(var(--_end-fraction) - var(--_start-fraction)))}.handle{position:absolute;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);border-radius:var(--_handle-shape);display:flex;place-content:center;place-items:center}.handleNub{position:absolute;height:var(--_handle-height);width:var(--_handle-width);border-radius:var(--_handle-shape);background:var(--_handle-color)}:host([disabled]) .handleNub{background:var(--_disabled-handle-color)}input.end:focus~.handleContainerPadded .handle.end>.handleNub,input.start:focus~.handleContainerPadded .handle.start>.handleNub{background:var(--_focus-handle-color)}.container>.handleContainerPadded .handle.hover>.handleNub{background:var(--_hover-handle-color)}:host(:not([disabled])) input.end:active~.handleContainerPadded .handle.end>.handleNub,:host(:not([disabled])) input.start:active~.handleContainerPadded .handle.start>.handleNub{background:var(--_pressed-handle-color)}.onTop.isOverlapping .label,.onTop.isOverlapping .label::before{outline:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.onTop.isOverlapping .handleNub{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.handle.start{inset-inline-start:calc(0px - var(--_state-layer-size)/2)}.handle.end{inset-inline-end:calc(0px - var(--_state-layer-size)/2)}.label{position:absolute;box-sizing:border-box;display:flex;padding:4px;place-content:center;place-items:center;border-radius:var(--md-sys-shape-corner-full, 9999px);color:var(--_label-text-color);font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);inset-block-end:100%;min-inline-size:var(--_label-container-height);min-block-size:var(--_label-container-height);background:var(--_label-container-color);transition:transform 100ms cubic-bezier(0.2, 0, 0, 1);transform-origin:center bottom;transform:scale(0)}:host(:focus-within) .label,.handleContainer.hover .label,:where(:has(input:active)) .label{transform:scale(1)}.label::before,.label::after{position:absolute;display:block;content:\"\";background:inherit}.label::before{inline-size:calc(var(--_label-container-height)/2);block-size:calc(var(--_label-container-height)/2);bottom:calc(var(--_label-container-height)/-10);transform:rotate(45deg)}.label::after{inset:0px;border-radius:inherit}.labelContent{z-index:1}input[type=range]{opacity:0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;box-sizing:border-box;height:100%;width:100%;margin:0;background:rgba(0,0,0,0);cursor:pointer;pointer-events:auto;appearance:none}input[type=range]:focus{outline:none}::-webkit-slider-runnable-track{-webkit-appearance:none}::-moz-range-track{appearance:none}::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;block-size:var(--_handle-height);inline-size:var(--_handle-width);opacity:0;z-index:2}input.end::-webkit-slider-thumb{--_track-and-knob-padding: calc( (var(--_state-layer-size) - var(--_handle-width)) / 2 );--_x-translate: calc( var(--_track-and-knob-padding) - 2 * var(--_end-fraction) * var(--_track-and-knob-padding) );transform:translateX(var(--_x-translate))}input.end:dir(rtl)::-webkit-slider-thumb{transform:translateX(calc(-1 * var(--_x-translate)))}input.start::-webkit-slider-thumb{--_track-and-knob-padding: calc( (var(--_state-layer-size) - var(--_handle-width)) / 2 );--_x-translate: calc( var(--_track-and-knob-padding) - 2 * var(--_start-fraction) * var(--_track-and-knob-padding) );transform:translateX(var(--_x-translate))}input.start:dir(rtl)::-webkit-slider-thumb{transform:translateX(calc(-1 * var(--_x-translate)))}::-moz-range-thumb{appearance:none;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);transform:scaleX(0);opacity:0;z-index:2}.ranged input.start{clip-path:inset(0 calc(100% - (var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2))) 0 0)}.ranged input.start:dir(rtl){clip-path:inset(0 0 0 calc(100% - (var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2))))}.ranged input.end{clip-path:inset(0 0 0 calc(var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2)))}.ranged input.end:dir(rtl){clip-path:inset(0 calc(var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2)) 0 0)}.onTop{z-index:1}.handle{--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}md-ripple{border-radius:50%;height:var(--_state-layer-size);width:var(--_state-layer-size)}\n`;\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {styles as forcedColorsStyles} from './internal/forced-colors-styles.js';\nimport {Slider} from './internal/slider.js';\nimport {styles} from './internal/slider-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-slider': MdSlider;\n  }\n}\n\n/**\n * @summary Sliders allow users to view and select a value (or range) along\n * a track.\n *\n * @description\n * Changes made with sliders are immediate, allowing the user to make slider\n * adjustments while determining a selection. Sliders shouldn’t be used to\n * adjust settings with any delay in providing user feedback. Sliders reflect\n * the current state of the settings they control.\n *\n * __Example usages:__\n * - Sliders are ideal for adjusting settings such as volume and brightness, or\n * for applying image filters.\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-slider')\nexport class MdSlider extends Slider {\n  static override styles: CSSResultOrNative[] = [styles, forcedColorsStyles];\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '@material/web/slider/slider.js';\n\nimport type {MdSlider} from '@material/web/slider/slider.js';\nimport {css, html, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {hctFromHex, hexFromHct} from '../utils/material-color-helpers.js';\n\n/**\n * A tuple denoting an inclusive value range.\n */\ntype Range = [number, number];\n\nconst HUE_RANGE: Range = [0, 360];\nconst CHROMA_RANGE: Range = [0, 150];\nconst TONE_RANGE: Range = [0, 100];\n\n/**\n * A slider for either hue, chroma, or tone with a preview gradient.\n *\n * @event input Fired when the user changes the value.\n */\n@customElement('hct-slider')\nexport class HCTSlider extends LitElement {\n  /**\n   * The visiable and accessible label for the control.\n   */\n  @property({type: String}) label = '';\n\n  /**\n   * The value of the slider.\n   */\n  @property({type: Number}) value = 0;\n\n  /**\n   * The color from which to base the preview gradient (really only useful for\n   * chroma).\n   */\n  @property({type: String}) color = '';\n\n  /**\n   * The type of HCT slider to display\n   */\n  @property({type: String}) type: 'hue' | 'chroma' | 'tone' = 'hue';\n\n  override render() {\n    let range = HUE_RANGE;\n\n    if (this.type === 'chroma') {\n      range = CHROMA_RANGE;\n    } else if (this.type === 'tone') {\n      range = TONE_RANGE;\n    }\n\n    return html`<section>\n      <span id=\"label\" class=\"color-on-surface-text\">${this.label}</span>\n      <md-slider\n        id=\"source\"\n        labeled\n        aria-label=${this.label}\n        .min=${range[0]}\n        .max=${range[1]}\n        .value=${this.value}\n        @input=${this.onInput}></md-slider>\n      <div\n        id=\"gradient\"\n        class=${this.type}\n        style=${styleMap({\n          background: this.buildGradient(),\n        })}></div>\n    </section>`;\n  }\n\n  private onInput(e: Event) {\n    const target = e.target as MdSlider;\n    this.value = target.value as number;\n\n    this.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Generates the linear-gradient background image CSS string for the gradient\n   * preview under the slider.\n   *\n   * @return A linear gradient CSS string.\n   */\n  private buildGradient() {\n    const numStops = 100;\n\n    let linearGradientString = 'linear-gradient(to right';\n\n    if (this.type === 'hue') {\n      for (let i = 0; i < numStops; i++) {\n        const hue = (HUE_RANGE[1] / numStops) * i;\n        // Set chroma to something fairly saturated + tone in the middle of\n        // black and white so it's not too dark or too bright and vary the hue\n        const hex = hexFromHct(hue, 100, 50);\n        linearGradientString += `, ${hex} ${i}%`;\n      }\n    } else if (this.type === 'chroma') {\n      const hct = hctFromHex(this.color || '#000');\n      const hue = hct.hue;\n\n      for (let i = 0; i < numStops; i++) {\n        const chroma = (CHROMA_RANGE[1] / numStops) * i;\n        // Change the color of the bar to the current hue and set the tone to\n        // mid so we it's not too dark or too bright and vary the chroma\n        const hex = hexFromHct(hue, chroma, 50);\n        linearGradientString += `, ${hex} ${i}%`;\n      }\n    } else if (this.type === 'tone') {\n      for (let i = 0; i < numStops; i++) {\n        const tone = (TONE_RANGE[1] / numStops) * i;\n        // Set tone color to black (0 chroma means that hue doesn't matter) and\n        // vary the tone\n        const hex = hexFromHct(0, 0, tone);\n        linearGradientString += `, ${hex} ${i}%`;\n      }\n    }\n\n    linearGradientString += ')';\n\n    return linearGradientString;\n  }\n\n  static override styles = css`\n    section {\n      display: flex;\n      flex-direction: column;\n    }\n\n    #gradient {\n      height: 24px;\n      border-radius: 12px;\n      border: 1px solid currentColor;\n      box-sizing: border-box;\n    }\n\n    #gradient.chroma {\n      will-change: background;\n    }\n\n    #label,\n    #gradient {\n      margin-inline: calc(var(--md-slider-handle-width, 20px) / 2);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hct-slider': HCTSlider;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A theme mapping of token name (not custom property name) to stringified CSS\n * value.\n */\nexport interface Theme {\n  [tokenName: string]: string;\n}\n\n/**\n * Requests the global theme listener change the theme due to a color change.\n */\nexport class ChangeColorEvent extends Event {\n  /**\n   * @param color The new source color to apply.\n   */\n  constructor(public color: string) {\n    super('change-color', {bubbles: true, composed: true});\n  }\n}\n\n/**\n * Requests the global theme listener change the theme due to a dark mode\n * change.\n */\nexport class ChangeDarkModeEvent extends Event {\n  /**\n   * @param mode The new color mode to apply.\n   */\n  constructor(public mode: 'light' | 'dark' | 'auto') {\n    super('change-mode', {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'change-color': ChangeColorEvent;\n    'change-mode': ChangeDarkModeEvent;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '@material/web/focus/md-focus-ring.js';\nimport '@material/web/icon/icon.js';\nimport '@material/web/labs/segmentedbutton/outlined-segmented-button.js';\nimport '@material/web/labs/segmentedbuttonset/outlined-segmented-button-set.js';\nimport './copy-code-button.js';\nimport './hct-slider.js';\n\nimport type {MdOutlinedSegmentedButton} from '@material/web/labs/segmentedbutton/outlined-segmented-button.js';\nimport {css, html, LitElement} from 'lit';\nimport {customElement, query, queryAll, state} from 'lit/decorators.js';\nimport {live} from 'lit/directives/live.js';\n\nimport {ChangeColorEvent, ChangeDarkModeEvent} from '../types/color-events.js';\nimport {hctFromHex, hexFromHct} from '../utils/material-color-helpers.js';\nimport type {ColorMode} from '../utils/theme.js';\nimport {\n  getCurrentMode,\n  getCurrentSeedColor,\n  getCurrentThemeString,\n} from '../utils/theme.js';\n\nimport type {HCTSlider} from './hct-slider.js';\n\n/**\n * A small set of controls that allows the user to change the theme and preview\n * color values.\n */\n@customElement('theme-changer')\nexport class ThemeChanger extends LitElement {\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * The currently selected color mode.\n   */\n  @state() selectedColorMode: ColorMode | null = null;\n\n  /**\n   * The currently selected hex color.\n   *\n   * NOTE: Hex colors are in the srgb color space and HCT has a much larger, so\n   * this value is a clipped value of HCT.\n   */\n  @state() hexColor = '';\n\n  /**\n   * The current hue value of the hue slider.\n   */\n  @state() hue = 0;\n\n  /**\n   * The crrent value of the chroma slider.\n   */\n  @state() chroma = 0;\n\n  /**\n   * The current value of the tone slider.\n   */\n  @state() tone = 0;\n\n  @query('input') private inputEl!: HTMLInputElement;\n  @queryAll('hct-slider') private sliders!: NodeListOf<HCTSlider>;\n\n  render() {\n    return html`\n      <div id=\"head-wrapper\">\n        <h2> Theme Controls </h2>\n        <copy-code-button\n          button-title=\"Copy current theme to clipboard\"\n          label=\"Copy current theme\"\n          .getCopyText=${getCurrentThemeString}>\n        </copy-code-button>\n      </div>\n      ${this.renderHexPicker()} ${this.renderHctPicker()}\n      ${this.renderColorModePicker()}\n    `;\n  }\n\n  /**\n   * Renders a circular native color picker with a focus ring.\n   */\n  protected renderHexPicker() {\n    return html`<div>\n      <label id=\"hex\" for=\"color-input\">\n        <span class=\"label\">Hex Source Color</span>\n        <span class=\"input-wrapper\">\n          <div class=\"overflow\">\n            <input\n              id=\"color-input\"\n              @input=${this.onHexPickerInput}\n              type=\"color\"\n              .value=${live(this.hexColor)} />\n          </div>\n          <md-focus-ring for=\"color-input\"></md-focus-ring>\n        </span>\n      </label>\n    </div>`;\n  }\n\n  /**\n   * Renders the three hct color pickers.\n   */\n  private renderHctPicker() {\n    return html`<div class=\"sliders\">\n      <hct-slider\n        .value=${live(this.hue)}\n        type=\"hue\"\n        label=\"Hue\"\n        max=\"360\"\n        @input=${this.onSliderInput}></hct-slider>\n      <hct-slider\n        .value=${live(this.chroma)}\n        .color=${this.hexColor}\n        type=\"chroma\"\n        label=\"Chroma\"\n        max=\"150\"\n        @input=${this.onSliderInput}></hct-slider>\n      <hct-slider\n        .value=${live(this.tone)}\n        type=\"tone\"\n        label=\"Tone\"\n        max=\"100\"\n        @input=${this.onSliderInput}></hct-slider>\n    </div>`;\n  }\n\n  /**\n   * Renders the color mode segmented button set picker.\n   */\n  private renderColorModePicker() {\n    return html`<md-outlined-segmented-button-set\n      @segmented-button-set-selection=${this.onColorModeSelection}\n      aria-label=\"Color mode\">\n      ${this.renderModeButton('dark', 'dark_mode')}\n      ${this.renderModeButton('auto', 'brightness_medium')}\n      ${this.renderModeButton('light', 'light_mode')}\n    </md-outlined-segmented-button-set>`;\n  }\n\n  /**\n   * Renders a color mode segmented button.\n   *\n   * @param mode Sets the value and the title of the button to the given color\n   *     mode.\n   * @param icon The icon to display in the button.\n   */\n  private renderModeButton(mode: ColorMode, icon: string) {\n    return html`<md-outlined-segmented-button\n      data-value=${mode}\n      title=${mode}\n      aria-label=\"${mode} color scheme\"\n      .selected=${this.selectedColorMode === mode}>\n      <md-icon slot=\"icon\">${icon}</md-icon>\n    </md-outlined-segmented-button>`;\n  }\n\n  private onSliderInput() {\n    for (const slider of this.sliders) {\n      this[slider.type] = slider.value;\n    }\n\n    this.hexColor = hexFromHct(this.hue, this.chroma, this.tone);\n    this.dispatchEvent(new ChangeColorEvent(this.hexColor));\n  }\n\n  /**\n   * Updates the HCT sliders by converting a hex color to HCT.\n   *\n   * @param hexColor The hex color to convert to HCT and update the sliders.\n   */\n  private updateHctFromHex(hexColor: string) {\n    const hct = hctFromHex(hexColor);\n    this.hue = hct.hue;\n    this.chroma = hct.chroma;\n    this.tone = hct.tone;\n  }\n\n  private onHexPickerInput() {\n    this.hexColor = this.inputEl.value;\n    this.updateHctFromHex(this.hexColor);\n    this.dispatchEvent(new ChangeColorEvent(this.hexColor));\n  }\n\n  async firstUpdated() {\n    if (!this.selectedColorMode) {\n      // localStorage is not available on server so must do this here.\n      this.selectedColorMode = getCurrentMode();\n    }\n\n    if (!this.hexColor) {\n      // localStorage is not available on server so must do this here.\n      this.hexColor = getCurrentSeedColor()!;\n    }\n\n    this.updateHctFromHex(this.hexColor);\n  }\n\n  private onColorModeSelection(\n    e: CustomEvent<{\n      button: MdOutlinedSegmentedButton;\n      selected: boolean;\n      index: number;\n    }>,\n  ) {\n    const {button} = e.detail;\n    const value = button.dataset.value as ColorMode;\n    this.selectedColorMode = value;\n    this.dispatchEvent(new ChangeDarkModeEvent(value));\n  }\n\n  static styles = css`\n    :host {\n      /* These are the default values, but we don't want the alignment to break\n       * in case the token values are updated.\n       */\n      --_copy-button-button-size: 40px;\n      --_copy-button-icon-size: 24px;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      margin: var(--catalog-spacing-m) var(--catalog-spacing-l);\n    }\n\n    :host > * {\n      margin-block-end: var(--catalog-spacing-l);\n    }\n\n    :host > *:last-child {\n      margin-block-end: 0;\n    }\n\n    #head-wrapper {\n      display: flex;\n      align-items: space-between;\n    }\n\n    input {\n      border: none;\n      background: none;\n    }\n\n    .sliders,\n    #hex {\n      padding-inline: var(--catalog-spacing-m);\n      border-radius: var(--catalog-shape-l);\n      background-color: var(--md-sys-color-surface-variant);\n      color: var(--md-sys-color-on-surface-variant);\n\n      /* Default track color is inaccessible in a surface-variant */\n      --md-slider-inactive-track-color: var(--md-sys-color-on-surface-variant);\n    }\n\n    hct-slider {\n      display: block;\n      margin-block: 24px;\n    }\n\n    h2 {\n      margin: 0;\n      text-align: center;\n      position: relative;\n      height: var(--_copy-button-icon-size);\n    }\n\n    copy-code-button {\n      --md-icon-button-icon-size: var(--_copy-button-icon-size);\n      --md-icon-button-state-layer-width: var(--_copy-button-button-size);\n      --md-icon-button-state-layer-height: var(--_copy-button-button-size);\n      /*\n       * Center the copy icon with the h2 text\n       * -(icon button size - intrinsic icon size) / 2\n       */\n      --_inline-block-inset: calc(\n        -1 * (var(--_copy-button-button-size) - var(--_copy-button-icon-size)) /\n          2\n      );\n      --catalog-copy-code-button-inset: var(--_inline-block-inset) 0 auto auto;\n      position: static;\n    }\n\n    #hex {\n      display: flex;\n      padding: 12px;\n      align-items: center;\n    }\n\n    #hex .label {\n      flex-grow: 1;\n    }\n\n    #hex .input-wrapper {\n      box-sizing: border-box;\n      width: 48px;\n      height: 48px;\n      box-sizing: border-box;\n      border: 1px solid var(--md-sys-color-on-secondary-container);\n      position: relative;\n    }\n\n    #hex .input-wrapper,\n    #hex md-focus-ring {\n      border-radius: 50%;\n    }\n\n    .overflow {\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      border-radius: inherit;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #hex input {\n      min-width: 200%;\n      min-height: 200%;\n    }\n\n    @media (forced-colors: active) {\n      #hex,\n      .sliders {\n        box-sizing: border-box;\n        border: 1px solid CanvasText;\n      }\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'theme-changer': ThemeChanger;\n  }\n}\n"],
  "mappings": "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",
  "names": ["o", "i", "styles", "i", "MdOutlinedSegmentedButton", "styles", "i", "styles", "i", "styles", "i", "MdOutlinedSegmentedButtonSet", "styles", "styles", "i", "when", "condition", "trueCase", "falseCase", "o", "n", "isOverlapping", "e", "x", "styles", "i", "MdSlider", "styles", "o", "e", "i", "l", "e", "i"]
}
