{
  "version": 3,
  "sources": ["../../src/utils/apply-theme-string.ts", "../../src/inline/apply-saved-theme.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\ntype WithStylesheet = typeof globalThis & {\n  [stylesheetName: string]: CSSStyleSheet | undefined;\n};\n\n/**\n * Applies a stringified CSS theme to a document or shadowroot by creating or\n * reusing a constructable stylesheet. It also saves the themeString to\n * localstorage.\n *\n * NOTE: This function is inlined into the head of the document for performance\n * reasons as well as used by material-color-helpers which is lazily loaded. So\n * do not overload this file with slow logic since it will block render.\n *\n * @param doc Document or ShadowRoot to apply theme.\n * @param themeString Stringified CSS of a material theme to apply to the given\n *     document or shadowroot.\n * @param ssName Optional global identifier of the constructable stylesheet and\n *     used to generate the localstorage name.\n */\nexport function applyThemeString(\n  doc: DocumentOrShadowRoot,\n  themeString: string,\n  ssName = 'material-theme',\n) {\n  // Get constructable stylesheet\n  let sheet = (globalThis as WithStylesheet)[ssName];\n  // Create a new sheet if it doesn't exist already and save it globally.\n  if (!sheet) {\n    sheet = new CSSStyleSheet();\n    (globalThis as WithStylesheet)[ssName] = sheet;\n    doc.adoptedStyleSheets.push(sheet);\n  }\n\n  // Set the color of the URL bar because we are cool like that.\n  const surfaceContainer = themeString.match(\n    /--md-sys-color-surface-container:(.+?);/,\n  )?.[1];\n  if (surfaceContainer) {\n    document\n      .querySelector('meta[name=\"theme-color\"]')\n      ?.setAttribute('content', surfaceContainer);\n  }\n\n  sheet.replaceSync(themeString);\n  localStorage.setItem(ssName, themeString);\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {applyThemeString} from '../utils/apply-theme-string.js';\n\n// Checks if there has been a theme already generated from a prior visit\nconst lastThemeString = localStorage.getItem('material-theme');\n\n// Applies the theme string to the document if available.\nif (lastThemeString) {\n  applyThemeString(document, lastThemeString);\n}\n"],
  "mappings": ";;;AAyBO,WAAS,iBACd,KACA,aACA,SAAS,kBACT;AAEA,QAAI,QAAS,WAA8B,MAAM;AAEjD,QAAI,CAAC,OAAO;AACV,cAAQ,IAAI,cAAc;AAC1B,MAAC,WAA8B,MAAM,IAAI;AACzC,UAAI,mBAAmB,KAAK,KAAK;AAAA,IACnC;AAGA,UAAM,mBAAmB,YAAY;AAAA,MACnC;AAAA,IACF,IAAI,CAAC;AACL,QAAI,kBAAkB;AACpB,eACG,cAAc,0BAA0B,GACvC,aAAa,WAAW,gBAAgB;AAAA,IAC9C;AAEA,UAAM,YAAY,WAAW;AAC7B,iBAAa,QAAQ,QAAQ,WAAW;AAAA,EAC1C;;;AC1CA,MAAM,kBAAkB,aAAa,QAAQ,gBAAgB;AAG7D,MAAI,iBAAiB;AACnB,qBAAiB,UAAU,eAAe;AAAA,EAC5C;",
  "names": []
}
